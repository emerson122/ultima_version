-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 10-04-2023 a las 07:52:23
-- Versión del servidor: 10.4.27-MariaDB
-- Versión de PHP: 8.1.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de datos: `systemhtours`
--

DELIMITER $$
--
-- Procedimientos
--
CREATE DEFINER=`root`@`localhost` PROCEDURE `BUSQUEDAD_LIBDIARIO` (`PV_CUENTA` VARCHAR(255), `PV_OPCION` VARCHAR(1))   BEGIN
declare V_cuentas,v_subcuentas varchar(255);
-- START TRANSACTION REMOVIDO

IF PV_OPCION = 1 THEN 
select nom_cuenta from TBL_CUENTAS
where nom_cuenta like PV_CUENTA;
ELSEIF PV_OPCION = 2 THEN
select nom_subcuenta from TBL_SUBCUENTAS
where nom_subcuenta like PV_CUENTA;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `DEL_LIBDIARIO` (IN `PB_CODLIBDIARIO` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

DELETE FROM TBL_COMPROBANTES WHERE COD_LIBDIARIO = PB_CODLIBDIARIO;
DELETE FROM TBL_LIBROS_DIARIOS 
WHERE COD_LIBDIARIO = PB_CODLIBDIARIO;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `INS_CUENTAS` (IN `PV_NATURALEZA` VARCHAR(255), IN `PV_NOMBRE_CUENTA` VARCHAR(255), IN `PV_NUM_CUENTA` VARCHAR(255), IN `PB_CODGRUPO` VARCHAR(255))   BEGIN
DECLARE V_CODIGO,V_NUMGRUPO VARCHAR(255);
DECLARE V_VALIDADORDEEXISTENCIA TINYINT;
/*LLEVA FORANEA CON LA CLASIFICACION*/
/*Valida naturaleza*/
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_CODIGO;
SELECT NUM_GRUPO FROM TBL_GRUPOS WHERE COD_GRUPO = PB_CODGRUPO INTO V_NUMGRUPO;

/*Valida existencia*/
select count(*) from TBL_CUENTAS where NUM_CUENTA = CONCAT(V_NUMGRUPO,'.',PV_NUM_CUENTA) INTO V_VALIDADORDEEXISTENCIA;
/*
si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 THEN


INSERT INTO TBL_CUENTAS
(COD_CLASIFICACION,COD_GRUPO ,NUM_CUENTA, NOM_CUENTA) 
VALUES (V_CODIGO,PB_CODGRUPO, CONCAT(V_NUMGRUPO,'.',PV_NUM_CUENTA), PV_NOMBRE_CUENTA);

SELECT @COD_CUENTA := MAX(COD_CUENTA) FROM TBL_CUENTAS;

INSERT INTO tbl_estados_cuentas
(COD_CUENTA, EST_CUENTA) 
VALUES (@COD_CUENTA , 'INGRESADA');


/* Si ya  existe despliega mensaje que esta duplicado */
ELSE
SELECT 'NUMERO DE CUENTA DUPLICADA';
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_BAL_GENERAL` (IN `PB_CODPERIODO` BIGINT, IN `PV_OPCION` VARCHAR(1))   BEGIN
DECLARE V_TOTAL,v_ACTCORRIENTE,V_PASCORRIENTE,V_ACTNOCORRIENTE,V_PASNOCC,V_PATRIMONIO,V_ACTIVO,V_PASIVO  DECIMAL(8,2);
DECLARE V_CLASIFICACION,V_CODACTIVO, V_CODPASIVO,V_CODPATRIMONIO,V_NUM,V_TIPO BIGINT;
DECLARE V_NOM,V_NOMPERIODO VARCHAR(255);
DECLARE V_INI,V_FIN DATETIME;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPCION = 1 THEN

SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVOS' OR NATURALEZA = 'ACTIVO' INTO V_CLASIFICACION;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "activos corrientes" OR NOM_GRUPO = 'ACTIVO CORRIENTE' INTO V_TIPO;
SELECT SUM(SAL_DEBE)+SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO v_ACTCORRIENTE;


SET V_CLASIFICACION := 0;
SET V_TIPO := 0;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "activos no corrientes" OR NOM_GRUPO = 'ACTIVO NO CORRIENTE' OR NOM_GRUPO = 'ACTIVOS ACTIVOS INTANGIBLES'  INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVOS' OR NATURALEZA = 'ACTIVO' INTO V_CLASIFICACION;
SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_ACTNOCORRIENTE;

SET V_CLASIFICACION := 0;
SET V_TIPO := 0;

SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivos corrientes" OR `NOM_GRUPO` = 'PASIVO CORRIENTE' INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVOS' OR NATURALEZA =  'PASIVO'  INTO V_CLASIFICACION;
SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASCORRIENTE;


SET V_CLASIFICACION := 0;
SET V_TIPO := 0;
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = "pasivos no corrientes" OR `NOM_GRUPO` = 'PASIVO NO CORRIENTE' INTO V_TIPO;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVOS'  OR NATURALEZA =  'PASIVO' INTO V_CLASIFICACION;
SELECT SUM(SAL_DEBE) +SUM(SAL_HABER)FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO AND COD_GRUPO = V_TIPO INTO V_PASNOCC;


SET V_CLASIFICACION := 0;
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PATRIMONIOS' OR NATURALEZA =  'PATRIMONIO' INTO V_CLASIFICACION;
SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_CLASIFICACION = V_CLASIFICACION  AND COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;


SELECT VALOR FROM TBL_MS_PARAMETROS WHERE PARAMETRO = 'NOM_EMPRESA'INTO V_NOM;


SET V_ACTIVO := v_ACTCORRIENTE + V_ACTNOCORRIENTE;
SET V_PASIVO := V_PASCORRIENTE + V_PASNOCC;

SELECT NOM_PERIODO,FEC_INI,FEC_FIN  FROM TBL_PERIODOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_NOMPERIODO,V_INI,V_FIN ;


SELECT v_ACTCORRIENTE AS Activos_Corrientes,V_ACTNOCORRIENTE AS ACTIVOS_NOCORRIENTES,V_ACTIVO AS TOTAL_ACTIVOS
,V_PASCORRIENTE AS PASIVOS_CORRIENTES,V_PASNOCC AS PASIVOS_NOCORRIENTES,
V_PASIVO AS TOTAL_PASIVOS,V_PATRIMONIO AS TOTAL_PATRIMONIOS, V_NOM AS NOMBRE_EMPRESA,V_NOMPERIODO AS PERIODO,V_INI AS FECHA_INICIAL,V_FIN AS FECHA_FINAL;

ELSEIF PV_OPCION = 2 THEN

SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'ACTIVO' OR NATURALEZA = 'ACTIVOS' INTO V_CLASIFICACION;
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
ELSEIF PV_OPCION = 3 THEN
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PASIVO' OR NATURALEZA= 'PASIVOS' INTO V_CLASIFICACION;
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
ELSEIF PV_OPCION = 4 THEN
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES  WHERE NATURALEZA =  'PATRIMONIO' OR NATURALEZA= 'PATRIMONIOS' INTO V_CLASIFICACION;
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_CLASIFICACION;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_BITACORA` (IN `PV_USR` VARCHAR(255), IN `PV_ACCION` VARCHAR(100), IN `PV_DESACCION` VARCHAR(100), IN `PV_OBJETO` VARCHAR(255), IN `PV_OPCION` VARCHAR(1))   BEGIN
DECLARE V_CODUSR,V_CODOBJ BIGINT;
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

  IF PV_OPCION = 1 THEN 
 SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USR INTO V_CODUSR;
 SELECT COD_OBJETO FROM TBL_OBJETOS WHERE OBJETO = PV_OBJETO INTO V_CODOBJ;
INSERT INTO TBL_MS_BITACORAS
(FEC_REGISTRO, USR_REGISTRA, COD_USR, ACC_SISTEMA, DES_BITACORA, COD_OBJETO) 
VALUES (NOW(), PV_USR, V_CODUSR, PV_ACCION, PV_DESACCION, V_CODOBJ);
ELSEIF PV_OPCION = 2 THEN
SELECT B.COD_BITACORA,B.FEC_REGISTRO,B.USR_REGISTRA,B.ACC_SISTEMA,B.DES_BITACORA,O.OBJETO FROM TBL_MS_BITACORAS AS B JOIN TBL_OBJETOS AS O ON B.COD_OBJETO =O.COD_OBJETO;
/*ACTIVIDAD DE UN SOLO USUARIO */
ELSEIF PV_OPCION = 3 THEN
SELECT B.COD_BITACORA,B.FEC_REGISTRO,B.USR_REGISTRA,B.ACC_SISTEMA,B.DES_BITACORA,O.OBJETO FROM TBL_MS_BITACORAS AS B JOIN TBL_OBJETOS AS O ON B.COD_OBJETO =O.COD_OBJETO WHERE USR_REGISTRA = PV_USR ;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_CLASIFICACIONES` (IN `PV_NATURALEZA` VARCHAR(255), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_CLASIFICACION BIGINT DEFAULT 0;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

INSERT INTO TBL_CLASIFICACIONES
( NATURALEZA) 
VALUES ( PV_NATURALEZA);


ELSEIF PV_OPERACION = 2 THEN

UPDATE TBL_CLASIFICACIONES
SET  NATURALEZA = PV_NATURALEZA 
WHERE COD_CLASIFICACION = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

SELECT COUNT(COD_CLASIFICACION) FROM TBL_GRUPOS WHERE COD_CLASIFICACION = PB_FILA INTO V_CLASIFICACION;
IF V_CLASIFICACION = 0 THEN 
DELETE FROM TBL_CLASIFICACIONES
WHERE COD_CLASIFICACION = PB_FILA; 
ELSE
SELECT 'NO PUEDES ELIMINAR ESTA CLASIFICACION';
END IF;


ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_CLASIFICACIONES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_CLASIFICACIONES WHERE COD_CLASIFICACION = PB_FILA;

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_COMPROBANTES` (IN `PB_COD_LIBDIARIO` BIGINT, IN `PV_COMPROBANTE` VARCHAR(255), IN `PV_OPCION` VARCHAR(255), IN `PB_FILA` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPCION = 1 THEN
Select @COD_LIBDIARIO :=  MAX(COD_LIBDIARIO) FROM TBL_LIBROS_DIARIOS;
Select @COD_LIBDIARIO2 :=  MAX(COD_LIBDIARIO) - 1 FROM TBL_LIBROS_DIARIOS;



INSERT INTO TBL_COMPROBANTES
(COD_LIBDIARIO, FEC_COMPROBANTE, COMPROBANTE) 
VALUES (@COD_LIBDIARIO2, NOW(), PV_COMPROBANTE);

INSERT INTO TBL_COMPROBANTES
(COD_LIBDIARIO, FEC_COMPROBANTE, COMPROBANTE) 
VALUES (@COD_LIBDIARIO, NOW(), PV_COMPROBANTE);


ELSEIF PV_OPCION = 2 THEN 
UPDATE TBL_COMPROBANTES 
SET COD_LIBDIARIO = PB_COD_LIBDIARIO , FEC_COMPROBANTE = NOW(), COMPROBANTE = PV_COMPROBANTE
WHERE COD_COMPROBANTE = PB_FILA;

ELSEIF PV_OPCION = 3 THEN 
DELETE FROM TBL_COMPROBANTES WHERE COD_COMPROBANTE = PB_FILA;

ELSEIF PV_OPCION = 4 THEN 
SELECT * FROM TBL_COMPROBANTES;

ELSEIF PV_OPCION = 5 THEN 
SELECT * FROM TBL_COMPROBANTES WHERE COD_LIBDIARIO = PB_FILA;
END IF ;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_CUENTAS` (IN `PB_NATURALEZA` BIGINT, IN `PV_NOMBRE_CUENTA` VARCHAR(255), IN `PV_NUM_CUENTA` VARCHAR(255), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN 
DECLARE V_NATURALEZA VARCHAR(255);
DECLARE V_MAYOR,V_DIARIO BIGINT DEFAULT 0;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 2 THEN
UPDATE TBL_CUENTAS 
SET COD_CLASIFICACION = PB_NATURALEZA , NUM_CUENTA = PV_NUM_CUENTA, NOM_CUENTA = PV_NOMBRE_CUENTA 
WHERE COD_CUENTA = PB_FILA;
ELSEIF PV_OPERACION = 3 THEN
select count(cod_cuenta) from TBL_LIBROS_DIARIOS where cod_cuenta = PB_FILA INTO V_DIARIO;
select count(cod_cuenta) from TBL_LIBROS_MAYORES where cod_cuenta = PB_FILA INTO V_MAYOR;
IF V_DIARIO = 0 AND V_MAYOR = 0 THEN
DELETE FROM TBL_CUENTAS WHERE COD_CUENTA = PB_FILA;
ELSE
SELECT 'LA CUENTA YA ESTA UTILIZADA' AS 'MESSAGE';
END IF;
ELSEIF PV_OPERACION = 4 THEN
SELECT TBL_CUENTAS.COD_CUENTA, TBL_CLASIFICACIONES.NATURALEZA as COD_CLASIFICACION,TBL_CLASIFICACIONES.COD_CLASIFICACION AS COD_NATU,
TBL_GRUPOS.NOM_GRUPO as cod_grupo,TBL_CUENTAS.NUM_CUENTA,TBL_CUENTAS.NOM_CUENTA FROM TBL_CUENTAS
INNER JOIN TBL_CLASIFICACIONES ON TBL_CUENTAS.COD_CLASIFICACION = TBL_CLASIFICACIONES.COD_CLASIFICACION
INNER JOIN TBL_GRUPOS ON TBL_CUENTAS.COD_GRUPO = TBL_GRUPOS.COD_GRUPO;
ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_CUENTAS WHERE COD_CUENTA = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT NUM_CUENTA FROM TBL_CUENTAS WHERE  COD_CUENTA =  PB_FILA;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_DEL_PERMISOS` (IN `PB_COD_PERMISO` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


DELETE FROM TBL_PERMISOS
WHERE COD_PERMISO = PB_COD_PERMISO; 

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_ESTADOS_CUENTAS` (IN `PB_COD_CUENTA` BIGINT, IN `PEM_EST_CUENTA` ENUM('INGRESADA','PENDIENTE','PROCESADA'), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

INSERT INTO TBL_ESTADOS_CUENTAS
(COD_CUENTA,EST_CUENTA)
VALUES (PB_COD_CUENTA,  PEM_EST_CUENTA );

ELSEIF PV_OPERACION = 2 THEN

UPDATE TBL_ESTADOS_CUENTAS
SET COD_CUENTA = PB_COD_CUENTA , EST_CUENTA = PEM_EST_CUENTA
WHERE COD_ESTCUENTA = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_ESTADOS_CUENTAS 
WHERE COD_ESTCUENTA = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_ESTADOS_CUENTAS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_ESTADOS_CUENTAS WHERE COD_ESTCUENTA = PB_FILA;

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_ESTADOS_RESULTADOS` (IN `PB_CODPERIODO` BIGINT)   BEGIN 

DECLARE 
V_VENTAS,
V_DESCUENTO_VENTAS,
V_DEVOLUCION_VENTAS,
V_COMPRAS,
V_DESCUENTO_COMPRAS,
V_DEVOLUCION_COMPRAS,
V_SUELDOS,
V_GASTOSV,
V_GASTOS,V_GASTOS_ADMINISTRACION BIGINT DEFAULT 0;


DECLARE V_TOTVENTAS,
V_TOTAL_DES_VENTAS,
V_TOTAL_DEV_VENTAS,
V_TOTAL_COMPRAS,
V_TOTAL_DES_COMPRAS,
V_TOTAL_DEV_COMPRAS,
V_IMP,
V_TOTGASTOS,
V_TOTSUELDOS,
V_TOTGASTOSV,V_TOTGASTOS_ADMIN DECIMAL(8, 2) DEFAULT 0;


DECLARE VENTAS_TOTALES, DES_VENTAS,DEV_VENTAS ,VENTAS_NETAS,
COMPRAS_TOTALES,DES_COMPRAS,DEV_COMPRAS,
COS_VENTAS,
UTI_BRUTA,
TOT_GASTOS,
SUEL_SALARI,
GAST_VENTAS,
GAST_ADMINIS,
UTI_ANTIMP,
IMP_UTILIDAD,
UTI_NETA DECIMAL(8, 2) DEFAULT 0; 
DECLARE V_INI,V_FIN DATETIME;
DECLARE V_EMPRESA,V_NOMPERIODO VARCHAR(255); START TRANSACTION;
 /* OBTENER COD DE CLASIFICACION DE LAS CUENTAS */
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'VENTAS' or  NATURALEZA= 'VENTA' INTO V_VENTAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTOS VENTAS' or NATURALEZA = 'DESCUENTOS INGRESOS' OR NATURALEZA = 'DESCUENTO INGRESOS' INTO V_DESCUENTO_VENTAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DEVOLUCIONES VENTAS' or NATURALEZA = 'DEVOLUCIONES INGRESOS' OR NATURALEZA = 'DEVOLUCIONES INGRESOS' INTO V_DEVOLUCION_VENTAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'COMPRAS' or NATURALEZA = 'COMPRA'  INTO V_COMPRAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DESCUENTOS COMPRAS' or NATURALEZA = 'DESCUENTO COMPRA' OR NATURALEZA = 'DESCUENTOS COMPRA' OR NATURALEZA = 'DESCUENTO COMPRAS' INTO V_DESCUENTO_COMPRAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'DEVOLUCIONES COMPRAS' or NATURALEZA = 'DEVOLUCIONES COMPRA' OR NATURALEZA = 'DEVOLUCION EN COMPRA' OR NATURALEZA = 'DEVOLUCION EN COMPRAS' INTO V_DEVOLUCION_COMPRAS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'SUELDOS Y SALARIOS' OR NATURALEZA = 'SUELDO' OR NATURALEZA = 'SUELDO Y SALARIO' INTO V_SUELDOS;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOS VENTAS' OR NATURALEZA ='GASTO VENTAS' OR NATURALEZA= 'GASTO VENTA' INTO V_GASTOSV;
  SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA= 'GASTOS DE ADMINISTRACION' or  NATURALEZA= 'GASTO DE ADMINISTRACION' INTO V_GASTOS_ADMINISTRACION;
  
 /* -------------------------------------------------------------------- */
 /* OBTENER TOTAL DE SALDOS DE VENTAS */
 SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_VENTAS INTO V_TOTVENTAS;
/*OBTENER DATOS DE DESCUENTOS DE VENTAS*/
 SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTO_VENTAS  INTO V_TOTAL_DES_VENTAS ;
/*OBTENER DATOS DE DEVOLUCIONES DE VENTAS*/
 SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DEVOLUCION_VENTAS INTO V_TOTAL_DEV_VENTAS;
/* OBTENER TOTAL DE SALDOS DE COMPRAS */
 SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_COMPRAS INTO V_TOTAL_COMPRAS;
/*OBTENER DATOS DE DESCUENTOS DE COMPRAS*/
 SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DESCUENTO_COMPRAS INTO V_TOTAL_DES_COMPRAS;
/*OBTENER DATOS DE DEVOLUCIONES DE VENTAS*/
 SELECT SUM(SAL_HABER) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_DEVOLUCION_COMPRAS INTO V_TOTAL_DEV_COMPRAS;

SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_SUELDOS INTO V_TOTSUELDOS;

SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOSV INTO V_TOTGASTOSV;

SELECT SUM(SAL_DEBE) FROM TBL_LIBROS_MAYORES WHERE COD_PERIODO = PB_CODPERIODO AND COD_CLASIFICACION = V_GASTOS_ADMINISTRACION INTO V_TOTGASTOS_ADMIN;
 
  /* RECUPERAR EL IMPUESTO */
SELECT CAST(VALOR AS DECIMAL(8,2)) FROM TBL_MS_PARAMETROS WHERE PARAMETRO = 'IMP_UTILIDAD' INTO V_IMP;

SELECT VALOR FROM TBL_MS_PARAMETROS WHERE `PARAMETRO` = 'NOM_EMPRESA' INTO V_EMPRESA;

  /*Datos del periodo*/
SELECT NOM_PERIODO,FEC_INI,FEC_FIN  FROM TBL_PERIODOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_NOMPERIODO,V_INI,V_FIN ;

IF V_TOTAL_DES_VENTAS IS NULL THEN
SET V_TOTAL_DES_VENTAS = 0;
END IF;

IF V_TOTAL_DES_COMPRAS IS NULL THEN
SET V_TOTAL_DES_COMPRAS = 0;
END IF;

   
    /* ASIGNARLE VALOR A LAS VARIABLES */
SET VENTAS_TOTALES = V_TOTVENTAS;
SET DES_VENTAS =  V_TOTAL_DES_VENTAS;
SET DEV_VENTAS = V_TOTAL_DEV_VENTAS;
SET VENTAS_NETAS = (V_TOTVENTAS - V_TOTAL_DES_VENTAS) - V_TOTAL_DEV_VENTAS; -- Ventas - DESCUENTOS - DEVOLUCIONES 
SET COMPRAS_TOTALES = V_TOTAL_COMPRAS;
SET DES_COMPRAS =V_TOTAL_DES_COMPRAS;
SET DEV_COMPRAS = V_TOTAL_DEV_COMPRAS;
SET COS_VENTAS =(V_TOTAL_COMPRAS - V_TOTAL_DES_COMPRAS)- V_TOTAL_DEV_COMPRAS ;
SET UTI_BRUTA = VENTAS_NETAS - COS_VENTAS; --  VENTAS NETAS - COSTO DE VENTAS = UTILIDAD BRUTA
SET SUEL_SALARI = V_TOTSUELDOS;
SET GAST_VENTAS = V_TOTGASTOSV;
SET GAST_ADMINIS = V_TOTGASTOS_ADMIN;
SET TOT_GASTOS = (SUEL_SALARI + GAST_VENTAS)+ GAST_ADMINIS;               --  GASTOS TOTALES

SET UTI_ANTIMP = UTI_BRUTA - TOT_GASTOS; -- UTILIDAD BRUTA - GASTOS TOTALES ES IGUAL UTILIDAD ANTES DE IMPUESTOS

IF  UTI_ANTIMP > 0 THEN 
SET IMP_UTILIDAD = UTI_ANTIMP * V_IMP;  -- IMPUESTO A LA UTILIDAD
ELSE
SET IMP_UTILIDAD = 0;                -- NO IMPUESTO A LA UTILIDAD
END IF;

SET UTI_NETA = UTI_ANTIMP - IMP_UTILIDAD; -- UTILIDAD O PERDIDA NETA

/* DEVOLVER VALORES  */
SELECT
    VENTAS_TOTALES,
    DES_VENTAS,
    DEV_VENTAS,
    VENTAS_NETAS,
    COMPRAS_TOTALES,
    DES_COMPRAS,
    DEV_COMPRAS,
    COS_VENTAS,
    UTI_BRUTA,
    SUEL_SALARI,
    GAST_VENTAS,
    GAST_ADMINIS,
    TOT_GASTOS,
    UTI_ANTIMP,
    IMP_UTILIDAD,
    UTI_NETA,
    V_EMPRESA AS EMPRESA,
    V_NOMPERIODO AS PERIODO,
    V_INI AS FECHA_INICIAL,
    V_FIN AS FECHA_FINAL;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_FIN_PERIODO` ()   BEGIN

-- START TRANSACTION REMOVIDO

select fec_fin from TBL_PERIODOS where ESTADO = 'ACTIVO' LIMIT 1;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_GRUPOS` (IN `PV_CLASIFICACION` VARCHAR(255), IN `PV_NUM_GRUPO` VARCHAR(255), IN `PV_NOM_GRUPO` VARCHAR(255), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_NATURALEZA BIGINT;
DECLARE V_CANTIDAD BIGINT DEFAULT 0;
DECLARE V_VALIDADORDEEXISTENCIA TINYINT;
DECLARE V_NOM_EXIT TINYINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


/*INSERT*/
IF PV_OPERACION = 1 THEN

SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_CLASIFICACION INTO V_NATURALEZA;
/*Valida existencia*/
select count(*) from TBL_GRUPOS where NUM_GRUPO = CONCAT(V_NATURALEZA,'.',PV_NUM_GRUPO) INTO V_VALIDADORDEEXISTENCIA;

select count(NOM_GRUPO) from tbl_grupos where NOM_GRUPO = PV_NOM_GRUPO INTO V_NOM_EXIT;
/*
si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 AND V_NOM_EXIT = 0 THEN
INSERT INTO TBL_GRUPOS
(COD_CLASIFICACION, NUM_GRUPO, NOM_GRUPO) 
VALUES (V_NATURALEZA, CONCAT(V_NATURALEZA,'.',PV_NUM_GRUPO), PV_NOM_GRUPO);
/* Si ya  existe despliega mensaje que esta duplicado */
ELSEIF  V_VALIDADORDEEXISTENCIA > 0 THEN
SELECT 'NUMERO DE GRUPO DUPLICADO' as 'message';
ELSEIF V_NOM_EXIT >0 THEN
SELECT 'NOMBRE DE GRUPO DUPLICADO' as 'message';
END IF;


/*UPDATE*/
ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_CLASIFICACION INTO V_NATURALEZA;
UPDATE TBL_GRUPOS 
SET COD_CLASIFICACION = V_NATURALEZA , NUM_GRUPO = PV_NUM_GRUPO, NOM_GRUPO = PV_NOM_GRUPO
WHERE COD_GRUPO = PB_FILA;

/*DELETE*/
ELSEIF PV_OPERACION = 3 THEN
SELECT COUNT(COD_GRUPO) FROM TBL_CUENTAS WHERE COD_GRUPO = PB_FILA INTO V_CANTIDAD ;
IF V_CANTIDAD = 0 THEN
DELETE FROM TBL_GRUPOS WHERE COD_GRUPO = PB_FILA;
ELSE
SELECT "EL GRUPO YA ESTA EN USO" AS 'MESSAGE';
END IF;

/*SELECT*/
ELSEIF PV_OPERACION = 4 THEN
SELECT TBL_GRUPOS.COD_GRUPO,TBL_CLASIFICACIONES.NATURALEZA,TBL_GRUPOS.NUM_GRUPO,TBL_GRUPOS.NOM_GRUPO
FROM TBL_GRUPOS INNER JOIN TBL_CLASIFICACIONES ON TBL_GRUPOS.COD_CLASIFICACION = TBL_CLASIFICACIONES.COD_CLASIFICACION;
/*SELECT 1 */
ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_GRUPOS WHERE COD_GRUPO = PB_FILA; 

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_INSERT_PERMISOS` (IN `PB_COD_ROL` BIGINT, IN `PB_COD_OBJETO` BIGINT, IN `PV_PER_INSERCION` VARCHAR(1), IN `PV_PER_ELIMINAR` VARCHAR(1), IN `PV_PER_ACTUALIZAR` VARCHAR(1), IN `PV_PER_CONSULTAR` VARCHAR(1))   BEGIN

DECLARE V_VAL1,V_VAL2 varchar(255);
SELECT COD_ROL, COD_OBJETO FROM  TBL_PERMISOS WHERE COD_ROL = PB_COD_ROL AND COD_OBJETO = PB_COD_OBJETO INTO V_VAL1,V_VAL2;
IF V_VAL1 > 0 AND V_VAL2 > 0 THEN
SELECT 'EL PERMISO YA EXISTE';
ELSE
INSERT INTO TBL_PERMISOS
(COD_ROL, COD_OBJETO, PER_INSERCION, PER_ELIMINACION, PER_ACTUALIZACION, PER_CONSULTAR) 
VALUES (PB_COD_ROL, PB_COD_OBJETO, PV_PER_INSERCION, PV_PER_ELIMINAR, PV_PER_ACTUALIZAR, PV_PER_CONSULTAR);
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_LIBDIARIO` (IN `PB_CODPERIODO` BIGINT, IN `PV_NOM_CUENTA` VARCHAR(255), IN `PV_NOM_SUBCUENTA` VARCHAR(255), IN `PD_SALDO_DEBE` DECIMAL(8,2), IN `PD_SALDO_HABER` DECIMAL(8,2), IN `PV_DES_TRAN` VARCHAR(255), IN `PF_FECHA` DATE, IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_CODCUENTA,V_CODSUBCUENTA,V_CODESTCUENTA BIGINT;
DECLARE V_SUBCUENTA VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES




IF PV_OPERACION = 1 THEN

SELECT COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA =  PV_NOM_CUENTA INTO V_CODCUENTA; 
SELECT COD_SUBCUENTA, NUM_SUBCUENTA  FROM TBL_SUBCUENTAS WHERE NOM_SUBCUENTA = PV_NOM_SUBCUENTA INTO V_CODSUBCUENTA,V_SUBCUENTA; 







INSERT INTO TBL_LIBROS_DIARIOS
(COD_CUENTA,COD_PERIODO, NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER,DES_TRAN, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA,PB_CODPERIODO ,V_SUBCUENTA, PV_NOM_SUBCUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, PV_DES_TRAN,PF_FECHA);


INSERT INTO tbl_transacciones
(COD_SUBCUENTA) 
VALUES (V_CODSUBCUENTA);



SELECT @COD_ESTADO := MAX(COD_LIBDIARIO) FROM TBL_LIBROS_DIARIOS;


UPDATE TBL_ESTADOS_CUENTAS 
SET  EST_CUENTA = 'PENDIENTE'
WHERE COD_CUENTA = V_CODCUENTA ;


UPDATE tbl_estados_subcuentas 
SET  EST_SUBCUENTAS = 'PENDIENTE' 
WHERE COD_SUBCUENTA =  V_CODSUBCUENTA;


ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA =  PV_NOM_CUENTA INTO V_CODCUENTA,V_SUBCUENTA; 
SELECT COD_ESTCUENTA from TBL_ESTADOS_CUENTAS where cod_cuenta = V_CODCUENTA INTO V_CODESTCUENTA;






INSERT INTO TBL_LIBROS_DIARIOS
(COD_CUENTA, COD_PERIODO,NUM_SUBCUENTA, NOM_SUBCUENTA, SAL_DEBE, SAL_HABER,DES_TRAN, FEC_LIBDIARIO) 
VALUES (V_CODCUENTA, PB_CODPERIODO,V_SUBCUENTA, PV_NOM_CUENTA, PD_SALDO_DEBE, PD_SALDO_HABER, PV_DES_TRAN,PF_FECHA);



SELECT @COD_ESTCUENTA := MAX(COD_LIBDIARIO) FROM TBL_LIBROS_DIARIOS;


UPDATE TBL_ESTADOS_CUENTAS 
SET  EST_CUENTA = 'PENDIENTE'
WHERE COD_CUENTA = V_CODCUENTA;


ELSEIF PV_OPERACION = 3 THEN
SELECT NUM_SUBCUENTA, NOM_SUBCUENTA FROM TBL_SUBCUENTAS WHERE COD_CUENTA =  PB_FILA ;

ELSEIF PV_OPERACION = 4 THEN
SELECT NUM_CUENTA,NOM_CUENTA FROM TBL_CUENTAS ORDER BY NUM_CUENTA Asc;

ELSEIF PV_OPERACION = 5 THEN
SELECT TBL_LIBROS_DIARIOS.*,TBL_COMPROBANTES.COMPROBANTE AS DIRRECCION,TBL_PERIODOS.NOM_PERIODO AS PERIODO FROM TBL_LIBROS_DIARIOS
INNER JOIN TBL_COMPROBANTES ON TBL_COMPROBANTES.COD_LIBDIARIO = TBL_LIBROS_DIARIOS.COD_LIBDIARIO
INNER JOIN TBL_PERIODOS ON TBL_PERIODOS.COD_PERIODO = TBL_LIBROS_DIARIOS.COD_PERIODO;

ELSEIF PV_OPERACION = 6 THEN
SELECT * FROM TBL_LIBROS_DIARIOS WHERE COD_LIBDIARIO = PB_FILA;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_LIBROS_MAYORES` (IN `PB_COD_PERIODO` BIGINT, IN `PV_NOM_CUENTA` VARCHAR(255), IN `PD_SALDEBE` DECIMAL(8,2), IN `PD_SALHABER` DECIMAL(8,2), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_CODCUENTA,V_CLASIFICACION,V_CODGRUPO BIGINT;
DECLARE V_TOTDEBE, V_TOTHABER,V_TOTAL DECIMAL(8,2) DEFAULT 0;
DECLARE V_NOMBRE,V_NUMSUB,V_ESTADOCUENTA VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

/*INSERTAR CUENTAS QUE EXISTEN EN LIBRO DIARIO (MAYORIZACION)*/
IF PV_OPERACION = 1 THEN

SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA, COD_GRUPO FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB,V_CODGRUPO;
SELECT SUM(SAL_DEBE),SUM(SAL_HABER)  FROM TBL_LIBROS_DIARIOS where COD_CUENTA = V_CODCUENTA AND COD_PERIODO = PB_COD_PERIODO INTO  V_TOTDEBE, V_TOTHABER ;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA =  V_CODCUENTA INTO V_ESTADOCUENTA;

IF V_TOTDEBE > V_TOTHABER THEN

SET V_TOTAL =  V_TOTDEBE-V_TOTHABER;

INSERT INTO TBL_LIBROS_MAYORES
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA,COD_GRUPO, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA,V_CODGRUPO, V_NUMSUB, PV_NOM_CUENTA, V_TOTAL, 0, NOW());
ELSEIF V_TOTHABER > V_TOTDEBE THEN
SET V_TOTAL =  V_TOTHABER-V_TOTDEBE;

INSERT INTO TBL_LIBROS_MAYORES
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA,COD_GRUPO, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA,V_CODGRUPO, V_NUMSUB, PV_NOM_CUENTA, 0, V_TOTAL, NOW());
END IF;
UPDATE tbl_estados_cuentas 
SET  EST_CUENTA = 'PROCESADA'
WHERE COD_CUENTA = V_CODCUENTA;

ELSEIF PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;

UPDATE TBL_LIBROS_MAYORES
SET COD_CUENTA = V_CODCUENTA , COD_PERIODO = PB_COD_PERIODO,COD_ESTCUENTA =V_ESTADOCUENTA, NUM_CUENTA = V_NUMSUB,NOM_CUENTA = PV_NOM_CUENTA, SAL_DEBE = PD_SALDEBE, SAL_HABER = PD_SALHABER, FEC_LIBMAYOR=NOW()
WHERE COD_LIBMAYOR = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_LIBROS_MAYORES 
WHERE COD_LIBMAYOR = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT TBL_LIBROS_MAYORES.*,TBL_CLASIFICACIONES.NATURALEZA,TBL_PERIODOS.NOM_PERIODO FROM TBL_LIBROS_MAYORES
INNER JOIN TBL_CLASIFICACIONES ON TBL_CLASIFICACIONES.COD_CLASIFICACION= TBL_LIBROS_MAYORES.COD_CLASIFICACION
INNER JOIN TBL_PERIODOS ON TBL_PERIODOS.COD_PERIODO = TBL_LIBROS_MAYORES.COD_PERIODO;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_LIBROS_MAYORES WHERE COD_LIBMAYOR = PB_FILA;

/*INSERTAR CUENTAS QUE NO EXISTEN EN LIBRO DIARIO */
ELSEIF PV_OPERACION = 6 THEN 
SELECT COD_CLASIFICACION, COD_CUENTA,NUM_CUENTA, COD_GRUPO FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_CODCUENTA,V_NUMSUB,V_CODGRUPO;
SELECT COD_ESTCUENTA FROM TBL_ESTADOS_CUENTAS WHERE COD_CUENTA = V_CODCUENTA INTO V_ESTADOCUENTA;
INSERT INTO TBL_LIBROS_MAYORES
(COD_CUENTA, COD_CLASIFICACION, COD_PERIODO, COD_ESTCUENTA, COD_GRUPO, NUM_CUENTA, NOM_CUENTA, SAL_DEBE, SAL_HABER, FEC_LIBMAYOR) 
VALUES (V_CODCUENTA, V_CLASIFICACION, PB_COD_PERIODO, V_ESTADOCUENTA,V_CODGRUPO, V_NUMSUB, PV_NOM_CUENTA , PD_SALDEBE, PD_SALHABER, NOW());
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_DEL_ROLES` (IN `PB_FILA` BIGINT)   BEGIN
START TRANSACTION;
DELETE FROM TBL_MS_ROLES 
WHERE COD_ROL = PB_FILA; 

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_INSERT_ROLES` (IN `PV_TIP_ROL` VARCHAR(30), IN `PV_DES_ROL` VARCHAR(50))   BEGIN
DECLARE V_ROL TINYINT;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COUNT(ROL) FROM TBL_MS_ROLES WHERE ROL = PV_TIP_ROL INTO V_ROL;

IF V_ROL > 0 THEN 
SELECT 'ESTE ROL YA EXISTE';

ELSE
INSERT INTO TBL_MS_ROLES
(ROL, DES_ROL) 
VALUES (PV_TIP_ROL, PV_DES_ROL);

END IF;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_PARAMETROS` (IN `PV_PARAMETRO` VARCHAR(255), IN `PV_VALOR` VARCHAR(50), IN `PV_COD_USR` VARCHAR(255), IN `PF_FECHA` DATETIME, IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_PARAMETRO BIGINT;
DECLARE V_CODUSER VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_COD_USR INTO V_CODUSER;
INSERT INTO TBL_MS_PARAMETROS
(PARAMETRO,VALOR, COD_USR, FEC_CREACION, FEC_MODIFICACION )
VALUES (PV_PARAMETRO,  PV_VALOR, V_CODUSER, NOW(), NOW());

ELSEIF PV_OPERACION = 2 THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_COD_USR INTO V_CODUSER;
UPDATE TBL_MS_PARAMETROS
SET  PARAMETRO = PV_PARAMETRO , VALOR = PV_VALOR,COD_USR = V_CODUSER,FEC_CREACION=PF_FECHA, FEC_MODIFICACION = NOW()
WHERE COD_PARAMETRO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_MS_PARAMETROS 
WHERE COD_PARAMETRO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT TBL_MS_PARAMETROS.`COD_PARAMETRO`,TBL_MS_PARAMETROS.`PARAMETRO`,TBL_MS_PARAMETROS.`VALOR`,TBL_MS_USR.`USR` AS COD_USR,
TBL_MS_PARAMETROS.`FEC_CREACION`,TBL_MS_PARAMETROS.`FEC_MODIFICACION` FROM TBL_MS_PARAMETROS INNER JOIN TBL_MS_USR
WHERE TBL_MS_PARAMETROS.`COD_USR` = TBL_MS_USR.`COD_USR`;

SELECT * FROM TBL_MS_PARAMETROS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_MS_PARAMETROS WHERE COD_PARAMETRO = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT *FROM TBL_MS_PARAMETROS WHERE PARAMETRO = PV_PARAMETRO;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_SEL_COD_ROLES` (`PB_COD_ROL` BIGINT)   BEGIN
-- START TRANSACTION REMOVIDO



SELECT * FROM TBL_MS_ROLES WHERE COD_ROL = PB_COD_ROL;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_SEL_NOM_ROLES` (`PV_ROL` VARCHAR(255))   BEGIN
-- START TRANSACTION REMOVIDO


SELECT * FROM TBL_MS_ROLES WHERE ROL = PV_ROL;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_SEL_ROLES` ()   BEGIN
-- START TRANSACTION REMOVIDO


SELECT * FROM TBL_MS_ROLES 
WHERE ROL NOT IN ("DEFAULT");

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_UPD_ROLES` (IN `PV_TIP_ROL` VARCHAR(30), IN `PV_DES_ROL` VARCHAR(50), IN `PB_FILA` BIGINT)   BEGIN
-- START TRANSACTION REMOVIDO


UPDATE TBL_MS_ROLES 
SET  ROL = PV_TIP_ROL, DES_ROL = PV_DES_ROL 
WHERE COD_ROL = PB_FILA;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_MS_USR_REGISTRO` (IN `PV_USR` VARCHAR(50), IN `PV_NOM_USR` VARCHAR(100), IN `PF_FEC_ULT_CONN` DATE, IN `PB_PREG_RES` BIGINT(20), IN `PB_PRIMER_ACC` BIGINT(20), IN `PV_CORREO` VARCHAR(100), IN `PV_CONTRASEGNA` VARCHAR(32))   BEGIN
DECLARE V_VAL,V_ROL BIGINT DEFAULT 0;
DECLARE V_CORREO TINYINT;
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES




SELECT COUNT(*) FROM TBL_MS_USR WHERE USR = PV_USR  INTO V_VAL;
SELECT COUNT(CORREO) FROM TBL_MS_USR WHERE CORREO =  PV_CORREO INTO V_CORREO;

IF V_VAL > 0 THEN


SELECT "EL USUARIO YA EXISTE" AS Mensaje;

ELSEIF V_CORREO > 0 THEN
SELECT "EL CORREO YA EXISTE" AS Mensaje;

ELSE
SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_HIST_CONTRASEGNA  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_BITACORA_USR AUTO_INCREMENT = 0;
END IF;

SELECT COD_ROL FROM TBL_MS_ROLES WHERE ROL = 'DEFAULT' INTO V_ROL;

INSERT INTO TBL_MS_USR(
USR,
NOM_USR,
COD_ROL,
FEC_ULT_CONN,	 		
PREG_RES,				
PRIMER_ACC, 				
CORREO)
VALUES(
PV_USR,
PV_NOM_USR,
V_ROL,
PF_FEC_ULT_CONN,	 		
PB_PREG_RES,				
PB_PRIMER_ACC, 				
PV_CORREO
);



SELECT @COD_USR := MAX(COD_USR) FROM TBL_MS_USR;

INSERT INTO TBL_MS_HIST_CONTRASEGNA(
COD_USR,
CONTRASEGNA)
VALUES(
@COD_USR,
PV_CONTRASEGNA
);
SELECT @COD_CONTRA := MAX(COD_HIST_CONTRA) FROM TBL_MS_HIST_CONTRASEGNA;

INSERT INTO TBL_MS_BITACORA_USR (
COD_USR,
COD_CONTRA,
USR_CREA_POR,
USR_MODF_POR,
USR_FEC_CREA,
USR_FEC_MODF, 
CONTRA_CREA_POR, 
CONTRA_MODF_POR, 
CONTRA_FEC_CREA, 
CONTRA_FEC_MODF)
VALUES(
@COD_USR,
@COD_CONTRA,
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW(),
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW()
);


END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_OBJETOS` (IN `PV_OBJETO` VARCHAR(100), IN `PV_DES_OBJETO` VARCHAR(100), IN `PV_TIP_OBJETO` VARCHAR(15), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

INSERT INTO TBL_OBJETOS
( OBJETO, DES_OBJETO, TIP_OBJETO) 
VALUES ( PV_OBJETO, PV_DES_OBJETO, PV_TIP_OBJETO);


ELSEIF PV_OPERACION = 2 THEN

UPDATE TBL_OBJETOS
SET OBJETO = PV_OBJETO, DES_OBJETO = PV_DES_OBJETO, TIP_OBJETO = PV_TIP_OBJETO 
WHERE COD_OBJETO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_OBJETOS
WHERE COD_OBJETO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_OBJETOS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_OBJETOS WHERE COD_OBJETO = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT * FROM TBL_OBJETOS WHERE OBJETO = PV_OBJETO;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_OPTIONS` (`PV_USER` VARCHAR(255))   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT EST_USR FROM TBL_MS_USR WHERE USR = PV_USER;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_PERIODOS` (IN `PV_COD_USUARIO` VARCHAR(255), IN `PV_NOM_PERIODO` VARCHAR(100), IN `PF_FEC_INI` DATETIME, IN `PF_FEC_FIN` DATETIME, IN `PV_ESTADO` VARCHAR(255), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_CODUSR BIGINT;
DECLARE V_VALIDAR_FECHA,V_FINI,V_FFIN TINYINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

SELECT COUNT(FEC_INI) FROM TBL_PERIODOS WHERE FEC_INI = PF_FEC_INI INTO V_FINI;
SELECT COUNT(FEC_INI) FROM TBL_PERIODOS WHERE FEC_FIN = PF_FEC_FIN INTO V_FFIN;
SET V_VALIDAR_FECHA := V_FINI + V_FFIN;
IF V_VALIDAR_FECHA = 0 THEN 

SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_COD_USUARIO INTO V_CODUSR ;

INSERT INTO TBL_PERIODOS
( COD_USUARIO,FEC_PERIODO, NOM_PERIODO, FEC_INI, FEC_FIN,ESTADO) 
VALUES ( V_CODUSR,NOW(),PV_NOM_PERIODO , PF_FEC_INI, PF_FEC_FIN,PV_ESTADO);

ELSE
SELECT 'LAS FECHAS CREAN CONFLICTOS CON PERIODOS ANTERIOR';
END IF;

ELSEIF PV_OPERACION = 2 THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_COD_USUARIO INTO V_CODUSR ;
UPDATE TBL_PERIODOS
SET  COD_USUARIO = V_CODUSR, FEC_PERIODO = NOW(), NOM_PERIODO = PV_NOM_PERIODO, FEC_INI = PF_FEC_INI, FEC_FIN = PF_FEC_FIN
,ESTADO =PV_ESTADO WHERE COD_PERIODO = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_PERIODOS
WHERE COD_PERIODO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_PERIODOS;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_PERIODOS WHERE COD_PERIODO = PB_FILA;

ELSEIF PV_OPERACION = 6 THEN

SELECT MAX(COD_PERIODO) FROM TBL_PERIODOS;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_PERSONAS` (IN `PV_USUARIO` VARCHAR(100), IN `PC_SEX_PERSONA` CHAR(1), IN `PI_EDAD_PERSONAL` INT(2), IN `PC_TIP_PERSONA` CHAR(1), IN `PV_NUM_IDENTIDAD` VARCHAR(255), IN `PC_IND_CIVIL` CHAR(1), IN `PV_NUM_TELEFONO` VARCHAR(32), IN `PC_TIP_TELEFONO` CHAR(1), IN `PV_OPERACION` VARCHAR(1), IN `PI_FILA` INT(1))   BEGIN
 DECLARE V_CODUSR BIGINT DEFAULT 0;
 START TRANSACTION;
 -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

 IF PV_OPERACION = 1 THEN
SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USUARIO INTO V_CODUSR;

INSERT INTO TBL_PERSONAS
(COD_USER, SEX_PERSONA, IND_CIVIL, EDA_PERSONAL, TIP_PERSONA, NUM_IDENTIDAD, FEC_REGISTRO) 
VALUES (V_CODUSR, PC_SEX_PERSONA, PC_IND_CIVIL, PI_EDAD_PERSONAL, PC_TIP_PERSONA, PV_NUM_IDENTIDAD,NOW());

 Select @COD_PERSONA := MAX(COD_PERSONA) FROM TBL_PERSONAS;

 INSERT INTO TBL_TELEFONOS
 (COD_PERSONA, NUM_TELEFONO, TIP_TELEFONO) 
 VALUES (@COD_PERSONA, PV_NUM_TELEFONO, PC_TIP_TELEFONO);







 
 ELSEIF PV_OPERACION = 2 THEN

 SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USUARIO INTO V_CODUSR;

UPDATE TBL_PERSONAS 
SET COD_USER = V_CODUSR , SEX_PERSONA = PC_SEX_PERSONA, IND_CIVIL = PC_IND_CIVIL, EDA_PERSONAL = PI_EDAD_PERSONAL, TIP_PERSONA = PC_TIP_PERSONA, NUM_IDENTIDAD = PV_Num_Identidad, FEC_REGISTRO = NOW() 
WHERE COD_PERSONA = PI_FILA
;


 UPDATE TBL_TELEFONOS 
 SET  NUM_TELEFONO = PV_NUM_TELEFONO, TIP_TELEFONO = PC_TIP_TELEFONO
 WHERE COD_PERSONA = PI_FILA;










 ELSEIF PV_OPERACION = 3 THEN
 DELETE FROM TBL_PERSONAS
 WHERE COD_PERSONA = PI_FILA;

 DELETE FROM TBL_TELEFONOS
 WHERE COD_TELEFONO = PI_FILA;

 ELSEIF PV_OPERACION = 4 THEN

SELECT 
TBL_PERSONAS.*,
TBL_TELEFONOS.`NUM_TELEFONO` AS 'TELEFONO',
TBL_TELEFONOS.`TIP_TELEFONO`,
TBL_MS_USR.`NOM_USR`,
TBL_MS_USR.`USR`,
TBL_MS_USR.CORREO
FROM TBL_PERSONAS INNER JOIN TBL_TELEFONOS ON TBL_PERSONAS.COD_PERSONA = TBL_TELEFONOS.COD_PERSONA
INNER JOIN TBL_MS_USR ON TBL_PERSONAS.`COD_USER` = TBL_MS_USR.`COD_USR`;



 ELSEIF PV_OPERACION = 5 THEN
 
SELECT TBL_PERSONAS.*,
TBL_TELEFONOS.`NUM_TELEFONO` AS 'TELEFONO',
TBL_TELEFONOS.`TIP_TELEFONO`,
TBL_MS_USR.`NOM_USR`,
TBL_MS_USR.CORREO
FROM TBL_PERSONAS INNER JOIN TBL_TELEFONOS ON TBL_PERSONAS.COD_PERSONA = TBL_TELEFONOS.COD_PERSONA
INNER JOIN TBL_MS_USR ON TBL_PERSONAS.`COD_USER` = TBL_MS_USR.`COD_USR`
WHERE COD_USR =  PI_FILA
LIMIT 1;


 
 ELSEIF PV_OPERACION  = 6 THEN
SELECT TBL_PERSONAS.*,TBL_TELEFONOS.`NUM_TELEFONO` AS 'TELEFONO',TBL_TELEFONOS.`TIP_TELEFONO`,TBL_MS_USR.`NOM_USR`,TBL_MS_USR.CORREO 
FROM TBL_PERSONAS INNER JOIN TBL_TELEFONOS ON TBL_PERSONAS.COD_PERSONA = TBL_TELEFONOS.COD_PERSONA
INNER JOIN TBL_MS_USR ON TBL_PERSONAS.`COD_USER` = TBL_MS_USR.`COD_USR`
WHERE USR = PV_USUARIO
;
ELSEIF PV_OPERACION = 7 THEN

SELECT COD_USR, USR
FROM TBL_MS_USR
where COD_ROL 
not in ( (
            SELECT COD_ROL
            FROM TBL_MS_ROLES
            WHERE ROL = 'Administrador'
        ), (
            SELECT COD_ROL
            FROM TBL_MS_ROLES
            WHERE ROL = 'MANTENIMIENTO'
        )
    ) and COD_USR NOT IN ( SELECT COD_USER
            FROM TBL_PERSONAS);
ELSEIF PV_OPERACION = 8 THEN

UPDATE TBL_PERSONAS 
SET  EST_USR = 'INACTIVO' 
WHERE COD_PERSONA = PI_FILA
;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_PREGUNTAS` (IN `PV_PREGUNTA` VARCHAR(255), IN `PV_RESPUESTA` VARCHAR(255), IN `PV_USR` VARCHAR(255), IN `PV_PASSWORD` VARCHAR(100))   BEGIN 
	DECLARE V_CODUSR BIGINT;
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

	SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USR INTO V_CODUSR;
	INSERT INTO TBL_MS_PREG (PREGUNTA,COD_USR) VALUES (PV_PREGUNTA,V_CODUSR);
	INSERT INTO
	    TBL_MS_PREG_USR (COD_USR, RESPUESTA)
	VALUES (V_CODUSR, PV_RESPUESTA);
	COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_ROLES_OBJETOS` (IN `PB_COD_ROL` BIGINT, IN `PB_COD_OBJETO` BIGINT, IN `PV_PER_EDICION` VARCHAR(1), IN `PV_PER_ELIMINAR` VARCHAR(1), IN `PV_PER_ACTUALIZAR` VARCHAR(1), IN `PF_FEC_CREACION` DATE, IN `PV_CRERADO_POR` VARCHAR(100), IN `PF_FEC_MODIFICACION` DATE, IN `PV_MOD_POR` VARCHAR(100), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

INSERT INTO TBL_ROLES_OBJETOS
(COD_ROL, COD_OBJETO, PER_EDICION, PER_ELIMINAR, PER_ACTUALIZAR, FEC_CREACION, CREADO_POR, FEC_MODIFICACION, MOD_POR) 
VALUES (PB_COD_ROL, PB_COD_OBJETO, PV_PER_EDICION, PV_PER_ELIMINAR, PV_PER_ACTUALIZAR, PF_FEC_CREACION, PV_CREADO_POR, PF_FEC_MODIFICACION, PV_MOD_POR);


ELSEIF PV_OPERACION = 2 THEN

UPDATE TBL_MS_ROLES 
SET COD_ROL=PB_COD_ROL, COD_OBJETO=PB_COD_OBJETO, PER_EDICION=PV_PER_EDICION, 
PER_ELIMINAR=PV_PER_ELIMINAR, PER_ACTUALIZAR=PV_PER_ACTUALIZAR, FEC_CREACION=PF_FEC_CREACION, 
CREADO_POR=PV_CREADO_POR, FEC_MODIFICACION=PF_FEC_MODIFICACION, MOD_POR=PV_MOD_POR 
WHERE COD_ROL = PB_FILA;

ELSEIF PV_OPERACION = 3 THEN

DELETE FROM TBL_ROLES_OBJETOS 
WHERE COD_ROL = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM TBL_MS_ROLES;

ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_ROLES_OBJETOS WHERE COD_ROL = PB_FILA;

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_SALDOS_BALANCES` (IN `PB_CODPERIODO` BIGINT, IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_ACTIVO,V_PASIVO,V_PATRIMONIO,V_TOTAL BIGINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN

 SELECT SUM(TOT_ACTIVO) FROM TBL_BAL_TOTACTIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_ACTIVO;
 SELECT SUM(TOT_PASIVO) FROM TBL_BAL_TOTPASIVOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PASIVO;
 SELECT SUM(TOT_PATRIMONIO) FROM TBL_BAL_TOTPATRIMONIOS WHERE COD_PERIODO = PB_CODPERIODO INTO V_PATRIMONIO;

SET V_TOTAL := V_PASIVO + V_PATRIMONIO;

INSERT INTO tbl_saldos_balances
( FEC_SALDOS, TOT_ACTIVO, TOT_PASPAT) 
VALUES ( NOW(), V_ACTIVO, V_TOTAL);


ELSEIF PV_OPERACION = 3 THEN

DELETE FROM tbl_saldos_balances 
WHERE COD_SALDO = PB_FILA; 

ELSEIF PV_OPERACION = 4 THEN

SELECT * FROM tbl_saldos_balances;
ELSEIF PV_OPERACION = 5 THEN
SELECT * FROM TBL_SALDOS_BALANCES WHERE COD_SALDO = PB_FILA;
ELSEIF PV_OPERACION = 6 THEN
SELECT * FROM TBL_SALDOS_BALANCES WHERE COD_PERIODO = PB_CODPERIODO;

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_SEL_PERMISOS` ()   BEGIN
START TRANSACTION;
-- START TRANSACTION REMOVIDO

SELECT TBL_PERMISOS.COD_PERMISO,TBL_MS_ROLES.ROL,TBL_PERMISOS.COD_ROL,TBL_PERMISOS.PER_INSERCION,TBL_PERMISOS.PER_ELIMINACION,TBL_PERMISOS.PER_ACTUALIZACION,
TBL_PERMISOS.PER_CONSULTAR,TBL_OBJETOS.OBJETO,TBL_OBJETOS.COD_OBJETO FROM TBL_MS_ROLES 
INNER JOIN TBL_PERMISOS ON  TBL_PERMISOS.COD_ROL = TBL_MS_ROLES.COD_ROL
INNER JOIN TBL_OBJETOS ON TBL_OBJETOS.COD_OBJETO = TBL_PERMISOS.COD_OBJETO;


COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_SUBCUENTAS` (IN `PV_NUM_SUBCUENTA` VARCHAR(255), IN `PV_NOM_SUBCUENTA` VARCHAR(255), IN `PV_NOM_CUENTA` VARCHAR(255), IN `PV_OPERACION` VARCHAR(1), IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_NUM,V_NOMBRE VARCHAR(255);
DECLARE V_VALIDADORDEEXISTENCIA,V_CLASIFICACION,V_CODCUENTA BIGINT;
DECLARE V_CUENTA BIGINT DEFAULT 0;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COD_CLASIFICACION,NUM_CUENTA,COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_NUM,V_CODCUENTA;
IF PV_OPERACION = 1 THEN

/*Valida existencia*/
select count(*) from TBL_SUBCUENTAS where NUM_SUBCUENTA = CONCAT(V_NUM,'.',PV_NUM_SUBCUENTA) INTO V_VALIDADORDEEXISTENCIA;
/*
si NO existe*/
IF V_VALIDADORDEEXISTENCIA = 0 THEN
INSERT INTO TBL_SUBCUENTAS
(COD_CLASIFICACION, NUM_SUBCUENTA, NOM_SUBCUENTA, COD_CUENTA) 
VALUES (V_CLASIFICACION,  CONCAT(V_NUM,'.',PV_NUM_SUBCUENTA), PV_NOM_SUBCUENTA, V_CODCUENTA);

SELECT @COD_SUBCUENTA := MAX(COD_SUBCUENTA) FROM TBL_SUBCUENTAS;

INSERT INTO tbl_estados_subcuentas
(COD_SUBCUENTA, EST_SUBCUENTAS) 
VALUES (@COD_SUBCUENTA, 'INGRESADA');

ELSE 
SELECT 'NUMERO DE SUBCUENTA DUPLICADA';
END IF;
ELSEIF  PV_OPERACION = 2 THEN
SELECT COD_CLASIFICACION,COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PV_NOM_CUENTA INTO V_CLASIFICACION,V_NUM;
UPDATE TBL_SUBCUENTAS 
SET COD_CLASIFICACION = V_CLASIFICACION , NUM_SUBCUENTA = PV_NUM_SUBCUENTA, NOM_SUBCUENTA = PV_NOM_SUBCUENTA, COD_CUENTA = V_NUM 
WHERE COD_SUBCUENTA = PB_FILA
;

ELSEIF  PV_OPERACION = 3 THEN
SELECT NOM_SUBCUENTA FROM TBL_SUBCUENTAS 
WHERE COD_SUBCUENTA = PB_FILA INTO V_NOMBRE;
SELECT COUNT(NOM_SUBCUENTA) FROM TBL_LIBROS_DIARIOS WHERE NOM_SUBCUENTA=V_NOMBRE INTO V_CUENTA;
IF V_CUENTA = 0 THEN
DELETE FROM TBL_SUBCUENTAS WHERE  COD_SUBCUENTA = PB_FILA;
delete from tbl_estados_subcuentas WHERE COD_SUBCUENTA =  PB_FILA;
ELSE
SELECT 'LA CUENTA ESTA EN USO NO SE PUEDE ELIMINAR' AS 'MESSAGE';
END IF;

ELSEIF  PV_OPERACION = 4 THEN
SELECT TBL_SUBCUENTAS.COD_SUBCUENTA,TBL_SUBCUENTAS.COD_CLASIFICACION,TBL_CLASIFICACIONES.NATURALEZA,TBL_SUBCUENTAS.NUM_SUBCUENTA,TBL_SUBCUENTAS.NOM_SUBCUENTA,TBL_CUENTAS.NOM_CUENTA AS COD_CUENTA
FROM TBL_SUBCUENTAS INNER JOIN TBL_CUENTAS ON TBL_SUBCUENTAS.COD_CUENTA = TBL_CUENTAS.COD_CUENTA
INNER JOIN TBL_CLASIFICACIONES ON TBL_CLASIFICACIONES.COD_CLASIFICACION = TBL_SUBCUENTAS.COD_CLASIFICACION
;

ELSEIF  PV_OPERACION = 5 THEN
SELECT * FROM TBL_SUBCUENTAS WHERE  COD_SUBCUENTA = PB_FILA;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_UPD_PERMISOS` (IN `PB_COD_ROL` BIGINT, IN `PB_COD_OBJETO` BIGINT, IN `PV_PER_INSERCION` VARCHAR(1), IN `PV_PER_ELIMINAR` VARCHAR(1), IN `PV_PER_ACTUALIZAR` VARCHAR(1), IN `PV_PER_CONSULTAR` VARCHAR(1))   BEGIN
-- START TRANSACTION REMOVIDO



UPDATE TBL_PERMISOS 
SET COD_ROL=PB_COD_ROL, COD_OBJETO=PB_COD_OBJETO, PER_INSERCION=PV_PER_INSERCION, 
PER_ELIMINACION=PV_PER_ELIMINAR, PER_ACTUALIZACION=PV_PER_ACTUALIZAR, PER_CONSULTAR=PV_PER_CONSULTAR 
WHERE COD_ROL = PB_COD_ROL AND COD_OBJETO = PB_COD_OBJETO;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PRC_USERPREG` (`PV_USER` VARCHAR(255), `PV_PREGUNTA` VARCHAR(255), `PV_RESPUESTA` VARCHAR(255), `PV_SELECCION` VARCHAR(1))   BEGIN
DECLARE V_CODUSR,V_CODPREG,V_RESPUESTA BIGINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_SELECCION = 'P' THEN
SELECT COUNT(COD_USR) FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;
IF V_CODUSR >0 THEN
SELECT TBL_MS_USR.COD_USR,TBL_MS_PREG_USR.COD_PREG,TBL_MS_PREG.PREGUNTA FROM TBL_MS_USR 
INNER JOIN TBL_MS_PREG_USR ON TBL_MS_USR.COD_USR = TBL_MS_PREG_USR.COD_USR 
INNER JOIN TBL_MS_PREG ON TBL_MS_PREG.COD_PREG = TBL_MS_PREG_USR.COD_PREG
WHERE USR = PV_USER;
ELSE
SELECT 'USUARIO DESCONOCIDO' AS 'MESSAGE';
END IF;

ELSEIF PV_SELECCION = 'R' THEN

SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;
SELECT COD_PREG FROM TBL_MS_PREG WHERE PREGUNTA = PV_PREGUNTA AND COD_USR = V_CODUSR INTO V_CODPREG;
SELECT COUNT(RESPUESTA) FROM TBL_MS_PREG_USR WHERE COD_PREG = V_CODPREG AND COD_USR =  V_CODUSR AND RESPUESTA = PV_RESPUESTA INTO V_RESPUESTA;
IF V_RESPUESTA = 1 THEN
SELECT 1 AS ESTADO;
ELSE
SELECT 0 AS ESTADO;
END IF;
ELSEIF PV_SELECCION = 'I' THEN

SELECT TBL_MS_USR.COD_USR,TBL_MS_PREG_USR.COD_PREG,TBL_MS_PREG.PREGUNTA FROM TBL_MS_USR 
INNER JOIN TBL_MS_PREG_USR ON TBL_MS_USR.COD_USR = TBL_MS_PREG_USR.COD_USR 
INNER JOIN TBL_MS_PREG ON TBL_MS_PREG.COD_PREG = TBL_MS_PREG_USR.COD_PREG
WHERE USR = PV_USER and PREGUNTA  not in (PV_PREGUNTA);
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_BITACORA_SELECCIONAR` ()   BEGIN
-- START TRANSACTION REMOVIDO

	SELECT 
	TMB.COD_BITACORA,
	TMB.FEC_REGISTRO,
	TMB.USR_REGISTRA,
	TMB.COD_USR,
	TMB.ACC_SISTEMA,
	TMB.DES_BITACORA,
	TBO.OBJETO
	FROM TBL_MS_BITACORAS TMB
	INNER JOIN TBL_OBJETOS TBO
	ON TBO.COD_OBJETO = TMB.COD_OBJETO
	ORDER BY TMB.COD_BITACORA DESC;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_CORREO_USR_ACTUALIZA` (IN `PB_COD` BIGINT(20), IN `PV_CORREO` VARCHAR(100))   BEGIN
-- START TRANSACTION REMOVIDO


	UPDATE TBL_MS_USR 
	SET CORREO = PV_CORREO 
	WHERE COD_USR = PB_COD;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_FEC_ULT_CONN_ACTUALIZA` (IN `PV_USR` VARCHAR(50))   BEGIN
-- START TRANSACTION REMOVIDO


	UPDATE TBL_MS_USR 
	SET FEC_ULT_CONN = NOW()
	WHERE USR = PV_USR;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_INGRESOS_ACTUALIZA` (IN `PV_USR` VARCHAR(50))   BEGIN
	
	DECLARE SUMA BIGINT;
	
	START TRANSACTION;
  -- PROCEDIMIENTO CON DOS TRANSACCIONES



	SELECT SUM(PRIMER_ACC) + 1 FROM TBL_MS_USR 
	WHERE USR = PV_USR INTO SUMA;	

	UPDATE TBL_MS_USR 
	SET PRIMER_ACC = SUMA
	WHERE USR = PV_USR;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_NOM_USR_ACTUALIZA` (IN `PB_COD` BIGINT(20), IN `Pv_NOM_USR` VARCHAR(100))   BEGIN
	-- START TRANSACTION REMOVIDO


	UPDATE TBL_MS_USR 
	SET NOM_USR = PV_NOM_USR 
	WHERE COD_USR = PB_COD;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_PREG_RES_ACTUALIZA` (IN `PB_FILA` BIGINT(20), IN `PV_PREGUNTA` VARCHAR(100), IN `PV_RESPUESTA` VARCHAR(100))   BEGIN
	START TRANSACTION;
  -- PROCEDIMIENTO CON DOS TRANSACCIONES


SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
END IF;


	UPDATE TBL_MS_PREG  
	SET PREGUNTA = PV_PREGUNTA
	WHERE COD_PREG = PB_FILA;

	UPDATE TBL_MS_PREG_USR  
	SET RESPUESTA = PV_RESPUESTA
	WHERE COD_PREG = PB_FILA;

	
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_PREG_SELECCIONAR` ()   BEGIN
-- START TRANSACTION REMOVIDO

SELECT COD_PREG,PREGUNTA ,USR
FROM TBL_MS_PREG TMS
INNER JOIN TBL_MS_USR TMU ON TMU.COD_USR = TMS.COD_USR ;  
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_PREG_SEL_USR` (IN `PV_USR` VARCHAR(50))   BEGIN
-- START TRANSACTION REMOVIDO


SELECT TBL_MS_PREG_USR.COD_PREG,TBL_MS_PREG.PREGUNTA,TBL_MS_USR.USR FROM TBL_MS_PREG
INNER JOIN TBL_MS_PREG_USR ON TBL_MS_PREG_USR.COD_PREG = TBL_MS_PREG.COD_PREG
INNER JOIN TBL_MS_USR ON TBL_MS_PREG_USR.COD_USR = TBL_MS_USR.COD_USR
WHERE USR = PV_USR;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_RES_SELECCIONAR` ()   BEGIN
	-- START TRANSACTION REMOVIDO

SELECT * FROM TBL_MS_PREG_USR;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_USR_ACTUALIZA` (IN `PV_USR` VARCHAR(50), IN `PV_NOM_USR` VARCHAR(100), IN `PEM_EST_USR` ENUM('BLOQUEADO','ACTIVO','INACTIVO','NUEVO'), IN `PB_COD_ROL` BIGINT, IN `PV_CORREO` VARCHAR(100), IN `PB_FILA` BIGINT(20))   BEGIN
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
END IF;

	UPDATE TBL_MS_USR 
	SET USR			 = PV_USR,
		NOM_USR		 = PV_NOM_USR,
		EST_USR 	 = PEM_EST_USR,	
    COD_ROL      = PB_COD_ROL,			
		CORREO		 = PV_CORREO
	WHERE COD_USR = PB_FILA;


 	UPDATE TBL_MS_BITACORA_USR  
	SET USR_MODF_POR = CURRENT_USER(),
		USR_FEC_MODF = NOW()
	WHERE COD_BITACORA_USR = PB_FILA;

	
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_USR_INSERTAR` (IN `PV_USR` VARCHAR(50), IN `PV_NOM_USR` VARCHAR(100), IN `PB_COD_ROL` BIGINT, IN `PF_FEC_ULT_CONN` DATE, IN `PB_PREG_RES` BIGINT(20), IN `PB_PRIMER_ACC` BIGINT(20), IN `PV_CORREO` VARCHAR(100), IN `PV_PREGUNTA` VARCHAR(100), IN `PV_RESPUESTA` VARCHAR(100), IN `PV_CONTRASEGNA` VARCHAR(32))   BEGIN
DECLARE V_CORREO VARCHAR(100);
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


SELECT  @USR := COUNT(COD_USR) FROM TBL_MS_USR;

IF @USR = 0 THEN 
	ALTER TABLE TBL_MS_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_PREG_USR  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_HIST_CONTRASEGNA  AUTO_INCREMENT = 0;
	ALTER TABLE TBL_MS_BITACORA_USR AUTO_INCREMENT = 0;
END IF;

SELECT COUNT(CORREO) FROM TBL_MS_USR WHERE CORREO =  PV_CORREO INTO V_CORREO;

IF V_CORREO = 0 THEN

INSERT INTO TBL_MS_USR(
USR,
NOM_USR,
COD_ROL,
FEC_ULT_CONN,	 		
PREG_RES,				
PRIMER_ACC, 				
CORREO)
VALUES(
PV_USR,
PV_NOM_USR,
PB_COD_ROL,
PF_FEC_ULT_CONN,	 		
PB_PREG_RES,				
PB_PRIMER_ACC, 				
PV_CORREO
);


SELECT @COD_USR := MAX(COD_USR) FROM TBL_MS_USR;

INSERT INTO TBL_MS_PREG(COD_USR,
PREGUNTA)
VALUES(@COD_USR,
PV_PREGUNTA
);


INSERT INTO TBL_MS_PREG_USR(
COD_USR,
RESPUESTA)
VALUES(
@COD_USR,
PV_RESPUESTA
);


INSERT INTO TBL_MS_HIST_CONTRASEGNA(
COD_USR,
CONTRASEGNA)
VALUES(
@COD_USR,
PV_CONTRASEGNA
);

SELECT @COD_CONTRA := MAX(COD_HIST_CONTRA) FROM TBL_MS_HIST_CONTRASEGNA;


INSERT INTO TBL_MS_BITACORA_USR (
COD_USR,
COD_CONTRA,
USR_CREA_POR,
USR_MODF_POR,
USR_FEC_CREA,
USR_FEC_MODF, 
CONTRA_CREA_POR, 
CONTRA_MODF_POR, 
CONTRA_FEC_CREA, 
CONTRA_FEC_MODF)
VALUES(
@COD_USR,
@COD_CONTRA,
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW(),
CURRENT_USER(),
CURRENT_USER(),
NOW(),
NOW()
);
ELSE
SELECT 'CORREO DUPLICADO';
END IF;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_USR_MODF_CONTRA` (IN `PV_CONTRA_ACTUAL` VARCHAR(32), IN `PV_CONTRASEGNA` VARCHAR(32), IN `PV_USR` VARCHAR(50))   BEGIN
	
	DECLARE COD BIGINT(20);
	DECLARE VERIFICAR TINYINT;
	
	START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


	SELECT COD_USR FROM TBL_MS_USR
	WHERE USR = PV_USR INTO COD;


	SELECT COUNT(CONTRASEGNA) FROM  TBL_MS_HIST_CONTRASEGNA
	WHERE COD_USR = COD  AND CONTRASEGNA = PV_CONTRA_ACTUAL INTO VERIFICAR;	

	IF VERIFICAR = 1 THEN
	UPDATE TBL_MS_HIST_CONTRASEGNA 
	SET CONTRASEGNA = PV_CONTRASEGNA
	WHERE COD_USR = COD;

 	UPDATE TBL_MS_BITACORA_USR  
	SET CONTRA_MODF_POR = CURRENT_USER(),
		CONTRA_FEC_MODF = CURRENT_TIMESTAMP()
	WHERE COD_BITACORA_USR = COD;

	ELSE 
	
	SELECT "CONTRASEÑA INCORRECTA" AS MENSAJE;

	END IF;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PROC_MS_USR_SELECCIONAR` ()   BEGIN
	START TRANSACTION;
  -- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT 
TBL_MS_USR.COD_USR AS CODIGO_USUARIO,
TBL_MS_USR.USR AS USUARIO,
TBL_MS_USR.NOM_USR AS NOMBRE_USUARIO,
TBL_MS_USR.EST_USR AS ESTADO_USUARIO,
TBL_MS_ROLES.COD_ROL AS COD_ROL,
TBL_MS_ROLES.ROL AS TIPO,
TBL_MS_USR.FEC_ULT_CONN AS FECHA_ULTIMO_ACCESO,
TBL_MS_USR.PREG_RES AS PREGUNTA_RESPONDIDA,
TBL_MS_USR.PRIMER_ACC AS PRIMER_ACCESO,
TBL_MS_USR.CORREO AS CORREO_ELECTRONICO
FROM TBL_MS_USR INNER JOIN TBL_MS_ROLES ON TBL_MS_ROLES.COD_ROL = TBL_MS_USR.COD_ROL;

SELECT
COD_PREG AS CODIGO_PREGUNTA,
PREGUNTA AS PREGUNTA
FROM TBL_MS_PREG;

SELECT 
COD_PREG AS CODIGO_RESPUESTA,
RESPUESTA AS RESPUESTA
FROM TBL_MS_PREG_USR;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_ACCESS_ROL` (`PV_ROL` VARCHAR(255))   BEGIN
DECLARE V_CODOBJETO BIGINT;
-- START TRANSACTION REMOVIDO


/* Objeto de Pantalla de acceso a las que puede acceder un rol*/
SELECT TBL_MS_ROLES.COD_ROL, TBL_PERMISOS.COD_OBJETO,TBL_OBJETOS.OBJETO FROM TBL_MS_ROLES 
INNER JOIN TBL_PERMISOS ON TBL_MS_ROLES.COD_ROL = TBL_PERMISOS.COD_ROL 
INNER JOIN TBL_OBJETOS ON TBL_PERMISOS.COD_OBJETO = TBL_OBJETOS.COD_OBJETO
WHERE ROL =  PV_ROL;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_ALLPERMISOS_ROL` (`PV_ROL` VARCHAR(255))   BEGIN
DECLARE V_CODOBJETO BIGINT;
-- START TRANSACTION REMOVIDO


SELECT TBL_PERMISOS.COD_PERMISO,TBL_PERMISOS.COD_ROL,TBL_PERMISOS.PER_INSERCION,TBL_PERMISOS.PER_ELIMINACION,TBL_PERMISOS.PER_ACTUALIZACION,
TBL_PERMISOS.PER_CONSULTAR,TBL_OBJETOS.OBJETO,TBL_OBJETOS.COD_OBJETO FROM TBL_MS_ROLES 
INNER JOIN TBL_PERMISOS ON  TBL_PERMISOS.COD_ROL = TBL_MS_ROLES.COD_ROL
INNER JOIN TBL_OBJETOS ON TBL_OBJETOS.COD_OBJETO = TBL_PERMISOS.COD_OBJETO
WHERE ROL = PV_ROL;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_CATALAGO` ()   BEGIN 
-- START TRANSACTION REMOVIDO

  
	SELECT
	    TBL_GRUPOS.NOM_GRUPO,
	    TBL_CUENTAS.NUM_CUENTA,
	    TBL_CUENTAS.NOM_CUENTA,
	    TBL_CLASIFICACIONES.NATURALEZA
	FROM TBL_CUENTAS
	    INNER JOIN TBL_CLASIFICACIONES ON TBL_CLASIFICACIONES.COD_CLASIFICACION = TBL_CUENTAS.COD_CLASIFICACION
	    INNER JOIN TBL_GRUPOS ON TBL_CUENTAS.COD_GRUPO = TBL_GRUPOS.COD_GRUPO
	ORDER BY NUM_CUENTA;
	COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_CATALAGO_SUBCUENTAS` ()   BEGIN 
	-- START TRANSACTION REMOVIDO

SELECT
    TBL_SUBCUENTAS.NUM_SUBCUENTA,
    TBL_SUBCUENTAS.NOM_SUBCUENTA,
    TBL_CUENTAS.NUM_CUENTA,
    TBL_CUENTAS.NOM_CUENTA,
    TBL_CLASIFICACIONES.NATURALEZA,
    TBL_GRUPOS.NOM_GRUPO
FROM TBL_SUBCUENTAS
    INNER JOIN TBL_CUENTAS ON TBL_SUBCUENTAS.COD_CUENTA = TBL_CUENTAS.COD_CUENTA
    INNER JOIN TBL_CLASIFICACIONES ON TBL_SUBCUENTAS.COD_CLASIFICACION = TBL_CLASIFICACIONES.COD_CLASIFICACION
    INNER JOIN TBL_GRUPOS ON TBL_CUENTAS.COD_GRUPO = TBL_GRUPOS.COD_GRUPO
ORDER BY
    TBL_SUBCUENTAS.NUM_SUBCUENTA;
	COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_CONTROL` ()   BEGIN
DECLARE V_USR,V_CUENTAS,V_SUBCUENTAS BIGINT;
DECLARE V_PERIODO VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COUNT(*) FROM TBL_MS_USR INTO V_USR;
SELECT COUNT(*) FROM TBL_CUENTAS INTO V_CUENTAS;
SELECT COUNT(*) FROM TBL_SUBCUENTAS INTO V_SUBCUENTAS;
SELECT MAX(NOM_PERIODO) FROM TBL_PERIODOS INTO V_PERIODO;
SELECT  V_USR AS USUARIOS,V_CUENTAS AS CUENTAS,V_SUBCUENTAS AS SUBCUENTAS,V_PERIODO AS PERIODO;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_COUNTNEW_USR` ()   BEGIN
DECLARE V_ROL BIGINT;
START TRANSACTION;
SELECT COD_ROL FROM TBL_MS_ROLES WHERE ROL = 'DEFAULT' INTO V_ROL;
SELECT COUNT(*) AS 'CUENTA' FROM TBL_MS_USR WHERE COD_ROL = V_ROL;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_CUENTAS` (`PV_NATURALEZA` VARCHAR(255))   BEGIN
-- START TRANSACTION REMOVIDO


SELECT TBL_CUENTAS.NOM_CUENTA FROM TBL_CUENTAS
INNER JOIN TBL_CLASIFICACIONES ON
TBL_CLASIFICACIONES.COD_CLASIFICACION = TBL_CUENTAS.COD_CLASIFICACION
WHERE NATURALEZA = PV_NATURALEZA;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_CUENTAS_COD` (`PV_NATURALEZA` BIGINT)   BEGIN
-- START TRANSACTION REMOVIDO

SELECT NOM_CUENTA FROM TBL_CUENTAS WHERE COD_CLASIFICACION = PV_NATURALEZA;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_DATA_BAL` (`PB_CODPERIODO` BIGINT, `PV_OPERACION` VARCHAR(1))   BEGIN 
DECLARE V_CODCOD BIGINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPERACION = 1 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = 'ACTIVO CORRIENTE' or NOM_GRUPO = 'ACTIVOS CORRIENTES' OR NOM_GRUPO = 'ACTIVO CORRIENTES'  OR NOM_GRUPO = 'ACTIVOS CORRIENTE' INTO V_CODCOD;


SELECT * FROM TBL_LIBROS_MAYORES
WHERE COD_GRUPO = V_CODCOD and COD_PERIODO = PB_CODPERIODO
;

ELSEIF  PV_OPERACION = 2 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = 'ACTIVO NO CORRIENTE' INTO V_CODCOD;


SELECT * FROM TBL_LIBROS_MAYORES
WHERE COD_GRUPO = V_CODCOD and COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPERACION = 3 THEN

SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = 'PASIVO CORRIENTE' INTO V_CODCOD;

SELECT * FROM TBL_LIBROS_MAYORES
WHERE COD_GRUPO = V_CODCOD and COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPERACION = 4 THEN

SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO = 'PASIVO NO CORRIENTE' INTO V_CODCOD;

SELECT * FROM TBL_LIBROS_MAYORES
WHERE COD_GRUPO = V_CODCOD and COD_PERIODO = PB_CODPERIODO;

ELSEIF PV_OPERACION = 5 THEN
SELECT COD_GRUPO FROM TBL_GRUPOS WHERE NOM_GRUPO =  'PATRIMONIO' OR NOM_GRUPO= 'PATRIMONIOS' INTO V_CODCOD;

SELECT * FROM TBL_LIBROS_MAYORES
WHERE COD_GRUPO = V_CODCOD and COD_PERIODO = PB_CODPERIODO;

END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_GRUPOS_UNIDAD` (`PV_NATURALEZA` VARCHAR(255))   BEGIN
DECLARE V_NATURALEZA VARCHAR(255);
-- START TRANSACTION REMOVIDO

SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA = PV_NATURALEZA INTO V_NATURALEZA;
SELECT COD_GRUPO,NOM_GRUPO FROM TBL_GRUPOS WHERE COD_CLASIFICACION = V_NATURALEZA;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_PERMISOS_ROL` (`PV_ROL` VARCHAR(255), `PV_OBJETO` VARCHAR(255))   BEGIN
DECLARE V_CODOBJETO BIGINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


SELECT COD_OBJETO FROM TBL_OBJETOS WHERE OBJETO = PV_OBJETO INTO V_CODOBJETO;
SELECT TBL_MS_ROLES.COD_ROL, TBL_PERMISOS.* FROM TBL_MS_ROLES
INNER JOIN TBL_PERMISOS ON TBL_MS_ROLES.COD_ROL = TBL_PERMISOS.COD_ROL
WHERE ROL = PV_ROL and COD_OBJETO = V_CODOBJETO;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_ROL_USR` (`PV_USR` VARCHAR(255))   BEGIN

SELECT TBL_MS_USR.COD_ROL,TBL_MS_ROLES.ROL FROM TBL_MS_USR INNER JOIN TBL_MS_ROLES ON TBL_MS_USR.COD_ROL = TBL_MS_ROLES.COD_ROL
where usr = PV_USR ;

COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_SUBCUENTAS_UNIDAD` (`PV_CUENTAS` VARCHAR(255), `PV_CLASIFICACION` VARCHAR(255))   BEGIN

DECLARE V_NATURALEZA,V_CUENTA BIGINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COD_CLASIFICACION FROM TBL_CLASIFICACIONES WHERE NATURALEZA =  PV_CLASIFICACION INTO V_NATURALEZA;
SELECT COD_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA =  PV_CUENTAS AND COD_CLASIFICACION = V_NATURALEZA INTO V_CUENTA;

SELECT NOM_SUBCUENTA FROM TBL_SUBCUENTAS WHERE COD_CUENTA =  V_CUENTA AND COD_CLASIFICACION = V_NATURALEZA;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_USERANDEMAIL` (`PV_USER` VARCHAR(255))   BEGIN
DECLARE V_EXIST TINYINT;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COUNT(CORREO) FROM TBL_MS_USR WHERE USR = PV_USER INTO V_EXIST;

IF (V_EXIST >0) THEN
SELECT CORREO FROM TBL_MS_USR WHERE USR = PV_USER;
ELSE
SELECT 'Usuario no encontrado' AS 'MESSAGE';
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SEL_USERANDPASS` (IN `PV_USER` VARCHAR(100), IN `PV_PASS` VARCHAR(100))   BEGIN
DECLARE V_CODUSR BIGINT DEFAULT 0;
DECLARE V_PASS VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES


SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_CODUSR;

IF(V_CODUSR >0) THEN
SELECT CONTRASEGNA FROM TBL_MS_HIST_CONTRASEGNA WHERE COD_USR = V_CODUSR AND CONTRASEGNA = PV_PASS INTO V_PASS ;

IF(V_PASS = PV_PASS) THEN
SELECT 1;
ELSE 
SELECT 0;

END IF;
ELSE
SELECT 0;
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_ESTADOUSR` (`PV_USER` VARCHAR(255), `PV_OPCION` VARCHAR(255))   BEGIN
DECLARE EST tinyint;
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

IF PV_OPCION = 1 THEN 

UPDATE TBL_MS_USR 
SET   EST_USR = 'ACTIVO'
WHERE USR = PV_USER
;
SELECT COUNT(*) FROM TBL_PERSONAS 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER) INTO EST;
IF EST > 0 THEN
UPDATE TBL_PERSONAS 
SET  EST_USR = 'ACTIVO' 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER)
;
END IF;
ELSEIF PV_OPCION = 2 THEN
UPDATE TBL_MS_USR 
SET   EST_USR = 'BLOQUEADO'
WHERE USR = PV_USER
;

SELECT COUNT(*) FROM TBL_PERSONAS 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER) INTO EST;
IF EST > 0 THEN
UPDATE TBL_PERSONAS 
SET  EST_USR = 'BLOQUEADO' 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER)
;
END IF;
ELSEIF PV_OPCION = 3 THEN

UPDATE TBL_MS_USR 
SET   EST_USR = 'INACTIVO'
WHERE USR = PV_USER
;
SELECT COUNT(*) FROM TBL_PERSONAS 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER) INTO EST;
IF EST > 0 THEN
UPDATE TBL_PERSONAS 
SET  EST_USR = 'INACTIVO' 
WHERE COD_USER = (SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER)
;
END IF;
END IF ;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_LIBDIARIO` (IN `PB_COD_PERIODO` BIGINT, IN `PB_NUM_SUBCUENTA` VARCHAR(255), IN `PB_NOM_SUBCUENTA` VARCHAR(255), IN `PB_SAL_DEBE` DECIMAL(8,2), IN `PB_SAL_HABER` DECIMAL(8,2), IN `PB_FEC_LIBDIARIO` DATETIME, IN `PB_FILA` BIGINT)   BEGIN
DECLARE V_CUENTA,V_SUBCUENTA TINYINT DEFAULT 0;
DECLARE V_NUMERO,V_NOMBRE VARCHAR(255);

START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COUNT(COD_CUENTA) FROM TBL_CUENTAS WHERE NOM_CUENTA = PB_NOM_SUBCUENTA INTO V_CUENTA;
SELECT COUNT(COD_SUBCUENTA) FROM TBL_SUBCUENTAS WHERE NOM_SUBCUENTA =  PB_NOM_SUBCUENTA INTO V_SUBCUENTA;

IF (V_CUENTA > 0) THEN
SELECT NUM_CUENTA,NOM_CUENTA FROM TBL_CUENTAS WHERE NOM_CUENTA = PB_NOM_SUBCUENTA INTO V_NUMERO,V_NOMBRE;
UPDATE TBL_LIBROS_DIARIOS 
SET COD_PERIODO = PB_COD_PERIODO ,  NUM_SUBCUENTA = V_NUMERO, NOM_SUBCUENTA = V_NOMBRE, SAL_DEBE = PB_SAL_DEBE, 
SAL_HABER = PB_SAL_HABER, FEC_LIBDIARIO = NOW() 
WHERE COD_LIBDIARIO = PB_FILA;

ELSEIF (V_SUBCUENTA>0) THEN
SELECT NUM_SUBCUENTA,NOM_SUBCUENTA FROM TBL_SUBCUENTAS WHERE NOM_SUBCUENTA = PB_NOM_SUBCUENTA INTO V_NUMERO,V_NOMBRE;
UPDATE TBL_LIBROS_DIARIOS 
SET COD_PERIODO = PB_COD_PERIODO ,  NUM_SUBCUENTA = V_NUMERO, NOM_SUBCUENTA = V_NOMBRE, SAL_DEBE = PB_SAL_DEBE, SAL_HABER = PB_SAL_HABER, FEC_LIBDIARIO = NOW() 
WHERE COD_LIBDIARIO = PB_FILA;
ELSE
SELECT ' CUENTA NO ENCONTRADA';
END IF;
COMMIT;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `UPD_PASS` (`PV_USER` VARCHAR(255), `PV_PASS` VARCHAR(255))   BEGIN
DECLARE V_USR BIGINT;
DECLARE V_PASS VARCHAR(255);
START TRANSACTION;
-- PROCEDIMIENTO CON MAS DE DOS TRANSACCIONES

SELECT COD_USR FROM TBL_MS_USR WHERE USR = PV_USER INTO V_USR;
SELECT CONTRASEGNA FROM TBL_MS_HIST_CONTRASEGNA WHERE COD_USR = V_USR INTO V_PASS;

IF V_PASS = PV_PASS THEN
SELECT 'NO PUEDES INGRESAR LA MISMA' AS 'message';

ELSE
UPDATE TBL_MS_HIST_CONTRASEGNA 
SET  CONTRASEGNA = PV_PASS
WHERE COD_USR = V_USR 
;
END IF;
COMMIT;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_clasificaciones`
--

CREATE TABLE `tbl_clasificaciones` (
  `COD_CLASIFICACION` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `NATURALEZA` varchar(255) NOT NULL COMMENT 'NATURALEZA DE  LA CUENTA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_clasificaciones`
--

INSERT INTO `tbl_clasificaciones` (`COD_CLASIFICACION`, `NATURALEZA`) VALUES
(1, 'Activo'),
(2, 'Pasivo');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_comprobantes`
--

CREATE TABLE `tbl_comprobantes` (
  `COD_COMPROBANTE` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_LIBDIARIO` bigint(20) NOT NULL COMMENT 'CODIGO DE  LLAVE FORANEA CON LIBRO DIARIO',
  `FEC_COMPROBANTE` datetime NOT NULL COMMENT 'FECHA DEL COMPROBANTE',
  `COMPROBANTE` varchar(255) NOT NULL COMMENT 'UBICACION DEL COMPROBANTE'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_cuentas`
--

CREATE TABLE `tbl_cuentas` (
  `COD_CUENTA` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CLASIFICACION` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA TABLA CLASIFICACION',
  `COD_GRUPO` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA TABLA GRUPOS',
  `NUM_CUENTA` varchar(255) NOT NULL COMMENT 'NUMERO DE LA CUENTA',
  `NOM_CUENTA` varchar(255) NOT NULL COMMENT 'NOMBRE DE LA CUENTA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_errores`
--

CREATE TABLE `tbl_errores` (
  `COD_ERROR` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_BITACORA` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA BITACORA',
  `NOM_ERROR` varchar(255) NOT NULL COMMENT 'NOMBRE DEL ERROR',
  `CODIGO` varchar(255) NOT NULL COMMENT 'CODIGO DEL ERROR',
  `MENSAJE` varchar(255) NOT NULL COMMENT 'MENSAJE DEL ERROR'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_estados_cuentas`
--

CREATE TABLE `tbl_estados_cuentas` (
  `COD_ESTCUENTA` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA DE LA TABLA ESTADO',
  `COD_CUENTA` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA SUBCUENTAS',
  `EST_CUENTA` enum('INGRESADA','PENDIENTE','PROCESADA') DEFAULT NULL COMMENT 'DESCRIPCION DEL ESTADO EN EL QUE SE ENCUENTRA LA TRANSACCION'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_estados_subcuentas`
--

CREATE TABLE `tbl_estados_subcuentas` (
  `COD_ESTADO` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA DE LA TABLA ESTADO',
  `COD_SUBCUENTA` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA SUBCUENTAS',
  `EST_SUBCUENTAS` enum('INGRESADA','PENDIENTE','PROCESADA') DEFAULT NULL COMMENT 'DESCRIPCION DEL ESTADO EN EL QUE SE ENCUENTRA LA TRANSACCION'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_grupos`
--

CREATE TABLE `tbl_grupos` (
  `COD_GRUPO` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CLASIFICACION` bigint(20) NOT NULL COMMENT 'CODIGO DE CLASIFICACION',
  `NUM_GRUPO` varchar(255) NOT NULL COMMENT 'CORRELATIVO DE GRUPO',
  `NOM_GRUPO` varchar(255) NOT NULL COMMENT 'Nombre del Grupo de clasificacion'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_grupos`
--

INSERT INTO `tbl_grupos` (`COD_GRUPO`, `COD_CLASIFICACION`, `NUM_GRUPO`, `NOM_GRUPO`) VALUES
(1, 1, '1.1', 'ACTIVOS');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_libros_diarios`
--

CREATE TABLE `tbl_libros_diarios` (
  `COD_LIBDIARIO` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CUENTA` bigint(20) DEFAULT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_PERIODO` bigint(20) DEFAULT NULL COMMENT 'CODIGO ID DEL PERIODO DE LA TRANSACCION',
  `NUM_SUBCUENTA` varchar(255) NOT NULL COMMENT 'NUMERO DE LA SUBCUENTA',
  `NOM_SUBCUENTA` varchar(255) NOT NULL COMMENT 'NOMBRE DE LA SUBCUENTA',
  `SAL_DEBE` decimal(8,2) NOT NULL COMMENT 'SALDO DEBE DE LA CUENTA',
  `SAL_HABER` decimal(8,2) NOT NULL COMMENT 'SALDO HABER DE LA CUENTA',
  `DES_TRAN` varchar(255) NOT NULL COMMENT 'DESCRIPCION DE TRANSACCION',
  `FEC_LIBDIARIO` date NOT NULL COMMENT 'FECHA QUE SE REGISTRA LA TUPLA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_libros_mayores`
--

CREATE TABLE `tbl_libros_mayores` (
  `COD_LIBMAYOR` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CUENTA` bigint(20) DEFAULT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CLASIFICACION` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA CLASIFICACION',
  `COD_PERIODO` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA PERIODO',
  `COD_ESTCUENTA` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA ESTADO DE CUENTAS',
  `COD_GRUPO` bigint(20) DEFAULT NULL COMMENT 'CODIGO DEL GRUPO',
  `NUM_CUENTA` varchar(255) NOT NULL COMMENT 'NUMERO DE LA CUENTA',
  `NOM_CUENTA` varchar(255) NOT NULL COMMENT 'NOMBRE DE LA CUENTA',
  `SAL_DEBE` decimal(8,2) NOT NULL COMMENT 'SALDO DEBE DE LA CUENTA',
  `SAL_HABER` decimal(8,2) NOT NULL COMMENT 'SALDO HABER DE LA CUENTA',
  `FEC_LIBMAYOR` datetime NOT NULL COMMENT 'FECHA QUE SE REGISTRA LA TUPLA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_bitacoras`
--

CREATE TABLE `tbl_ms_bitacoras` (
  `COD_BITACORA` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA',
  `FEC_REGISTRO` datetime NOT NULL COMMENT 'FECHA EN LA QUE SE REGISTRO',
  `USR_REGISTRA` varchar(100) NOT NULL COMMENT 'USUARIO QUE SE REGISTRO',
  `COD_USR` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE USUARIO',
  `ACC_SISTEMA` varchar(100) NOT NULL COMMENT 'ACCION REALIZADA',
  `DES_BITACORA` varchar(100) NOT NULL COMMENT 'DESCRIPCION BITACORA',
  `COD_OBJETO` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA CODIGO OBJETO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_ms_bitacoras`
--

INSERT INTO `tbl_ms_bitacoras` (`COD_BITACORA`, `FEC_REGISTRO`, `USR_REGISTRA`, `COD_USR`, `ACC_SISTEMA`, `DES_BITACORA`, `COD_OBJETO`) VALUES
(1, '2023-04-09 20:22:49', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CUENTAS', 4),
(2, '2023-04-09 20:22:54', 'TECNOBOT', 4, 'PANTALLA SUBCUENTAS CONSULTA', 'TECNOBOT INGRESO A LA PANTALLA DE SUBCUENTAS', 5),
(3, '2023-04-09 20:22:59', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOTINGRESO A LA PANTALLA DE LIBRO DIARIO', 6),
(4, '2023-04-09 20:23:06', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(5, '2023-04-09 20:23:21', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(6, '2023-04-09 20:23:45', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE CONTADOR EN LA PANTALLA DE ROLES', 16),
(7, '2023-04-09 20:23:45', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(8, '2023-04-09 20:24:59', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(9, '2023-04-09 20:25:16', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(10, '2023-04-09 20:30:03', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE Auditor EN LA PANTALLA DE ROLES', 16),
(11, '2023-04-09 20:30:04', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(12, '2023-04-09 20:32:33', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE Auditor EN LA PANTALLA DE ROLES', 16),
(13, '2023-04-09 20:32:34', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(14, '2023-04-09 20:33:03', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE Auditor EN LA PANTALLA DE ROLES', 16),
(15, '2023-04-09 20:33:03', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(16, '2023-04-09 20:33:14', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE CONTADOR EN LA PANTALLA DE ROLES', 16),
(17, '2023-04-09 20:33:15', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(18, '2023-04-09 20:33:32', 'TECNOBOT', 4, 'ACTUALIZO UN DATO EN PANTALLA ', 'TECNOBOT ACTUALIZO EL DATO DE CONTADOR EN LA PANTALLA DE ROLES', 16),
(19, '2023-04-09 20:33:33', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(20, '2023-04-09 20:33:57', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(21, '2023-04-09 20:34:01', 'TECNOBOT', 4, 'PANTALLA  METODO GET', 'TECNOBOT EJECUTO LA FUNCION DE ROLES EN PERMISOS', 17),
(22, '2023-04-09 20:34:22', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(23, '2023-04-09 20:34:23', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(24, '2023-04-09 20:34:27', 'TECNOBOT', 4, 'PANTALLA  METODO GET', 'TECNOBOT EJECUTO LA FUNCION DE ROLES EN PERMISOS', 17),
(25, '2023-04-09 20:38:24', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(26, '2023-04-09 20:38:48', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(27, '2023-04-09 20:39:01', 'TECNOBOT', 4, 'PANTALLA  METODO GET', 'TECNOBOT EJECUTO LA FUNCION DE ROLES EN PERMISOS', 17),
(28, '2023-04-09 20:39:17', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(29, '2023-04-09 20:39:27', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(30, '2023-04-09 20:39:28', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(31, '2023-04-09 20:40:21', 'TECNOBOT', 4, 'PANTALLA  METODO GET', 'TECNOBOT EJECUTO LA FUNCION DE ROLES EN PERMISOS', 17),
(32, '2023-04-09 20:40:30', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(33, '2023-04-09 20:40:31', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(34, '2023-04-09 20:41:11', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(35, '2023-04-09 20:41:25', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(36, '2023-04-09 20:41:34', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(37, '2023-04-09 20:41:35', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(38, '2023-04-09 20:41:41', 'TECNOBOT', 4, 'PANTALLA  METODO GET', 'TECNOBOT EJECUTO LA FUNCION DE ROLES EN PERMISOS', 17),
(39, '2023-04-09 20:41:56', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT MODIFICO LOS PERMISOS DEL ROL 1 EN LA PANTALLA DE PERMISOS', 17),
(40, '2023-04-09 20:41:57', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 17),
(41, '2023-04-09 21:10:11', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(42, '2023-04-09 21:10:17', 'TECNOBOT', 4, 'PANTALLA CONSULTAR', 'TECNOBOT INGRESO A LA PANTALLA DE GRUPOS', 12),
(43, '2023-04-09 21:11:59', 'TECNOBOT', 4, 'PANTALLA CONSULTAR', 'TECNOBOT INGRESO A LA PANTALLA DE GRUPOS', 12),
(44, '2023-04-09 21:12:13', 'TECNOBOT', 4, 'PANTALLA CONSULTAR', 'TECNOBOT INGRESO A LA PANTALLA DE GRUPOS', 12),
(45, '2023-04-09 21:12:34', 'TECNOBOT', 4, 'PANTALLA CONSULTAR', 'TECNOBOT INGRESO A LA PANTALLA DE GRUPOS', 12),
(46, '2023-04-09 21:12:51', 'TECNOBOT', 4, 'PANTALLA CONSULTAR', 'TECNOBOT INGRESO A LA PANTALLA DE GRUPOS', 12),
(47, '2023-04-09 21:13:54', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(48, '2023-04-09 21:21:20', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(49, '2023-04-09 21:39:37', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(50, '2023-04-09 21:40:59', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE <s> EN LA PANTALLA DE ROLES', 16),
(51, '2023-04-09 21:40:59', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(52, '2023-04-09 21:48:41', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(53, '2023-04-09 21:49:22', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(54, '2023-04-09 21:52:55', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(55, '2023-04-09 21:53:57', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(56, '2023-04-09 21:57:44', 'TECNOBOT', 4, 'PANTALLA ROLES METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE ROLES', 16),
(57, '2023-04-09 21:59:53', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(58, '2023-04-09 22:01:46', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(59, '2023-04-09 22:01:55', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE dsadasd#$%^&*( EN LA PANTALLA DE CLASIFICACION', 11),
(60, '2023-04-09 22:01:55', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(61, '2023-04-09 22:02:41', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(62, '2023-04-09 22:04:00', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(63, '2023-04-09 22:04:31', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(64, '2023-04-09 22:05:29', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(65, '2023-04-09 22:05:45', 'TECNOBOT', 4, 'ACTUALIZO UN DATO EN PANTALLA ', 'TECNOBOT ACTUALIZO EL DATO DE Pasivo EN LA PANTALLA DE CLASIFICACION', 11),
(66, '2023-04-09 22:05:45', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE CLASIFICACION', 11),
(67, '2023-04-09 22:06:33', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(68, '2023-04-09 22:10:29', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(69, '2023-04-09 22:11:22', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(70, '2023-04-09 22:21:37', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(71, '2023-04-09 22:22:14', 'TECNOBOT', 4, 'ACTUALIZO UN DATO EN PANTALLA ', 'TECNOBOT ACTUALIZO EL DATO DE Periodo-2023-Apr-001 EN LA PANTALLA DE PERIODO', 7),
(72, '2023-04-09 22:22:14', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(73, '2023-04-09 22:23:06', 'TECNOBOT', 4, 'PANTALLA METODO POST', 'TECNOBOT INSERTO EL DATO DE Periodo-2023-Apr-002 EN LA PANTALLA DE PERIODO', 7),
(74, '2023-04-09 22:23:06', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(75, '2023-04-09 22:28:53', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(76, '2023-04-09 22:29:48', 'TECNOBOT', 4, 'PANTALLA METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE PERIODO', 7),
(77, '2023-04-09 22:34:29', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(78, '2023-04-09 22:34:47', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO POST', 'TECNOBOT ACTUALIZO UN USUARIO A USER1', 15),
(79, '2023-04-09 22:34:47', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(84, '2023-04-09 23:17:15', 'Usuario_Auto_Registrado', 3, 'Creacion de Usuario', 'Registro  de Usuario: EMERSON001', 3),
(85, '2023-04-09 23:17:29', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(86, '2023-04-09 23:24:15', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(87, '2023-04-09 23:25:18', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15),
(88, '2023-04-09 23:25:25', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO POST', 'TECNOBOT ACTUALIZO UN USUARIO A EMERSON001', 15),
(89, '2023-04-09 23:25:26', 'TECNOBOT', 4, 'PANTALLA USUARIOS METODO GET', 'TECNOBOT INGRESO A LA PANTALLA DE USUARIOS', 15);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_bitacora_usr`
--

CREATE TABLE `tbl_ms_bitacora_usr` (
  `COD_BITACORA_USR` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS BITACORA USR',
  `COD_USR` bigint(20) DEFAULT NULL COMMENT 'CODIGO USUARIO',
  `COD_CONTRA` bigint(20) DEFAULT NULL COMMENT 'CODIGO CONTRASEÑA',
  `USR_CREA_POR` varchar(50) NOT NULL DEFAULT '' COMMENT 'USUARIO CREADO POR',
  `USR_MODF_POR` varchar(50) NOT NULL DEFAULT '' COMMENT 'USUARIO MODIFICADO POR',
  `USR_FEC_CREA` datetime NOT NULL COMMENT 'USUARIO FECHA CREADO',
  `USR_FEC_MODF` datetime NOT NULL COMMENT 'USUARIO FECHA MODIFICADO',
  `CONTRA_CREA_POR` varchar(50) NOT NULL DEFAULT '' COMMENT 'CONTRASEÑA CREADO POR',
  `CONTRA_MODF_POR` varchar(50) NOT NULL DEFAULT '' COMMENT 'CONTRASEÑA MODIFICADO POR',
  `CONTRA_FEC_CREA` datetime NOT NULL COMMENT 'CONTRASEÑA FECHA CREADO',
  `CONTRA_FEC_MODF` datetime NOT NULL COMMENT 'CONTRASEÑA FECHA MODIFICADA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS BITACORA USR';

--
-- Volcado de datos para la tabla `tbl_ms_bitacora_usr`
--

INSERT INTO `tbl_ms_bitacora_usr` (`COD_BITACORA_USR`, `COD_USR`, `COD_CONTRA`, `USR_CREA_POR`, `USR_MODF_POR`, `USR_FEC_CREA`, `USR_FEC_MODF`, `CONTRA_CREA_POR`, `CONTRA_MODF_POR`, `CONTRA_FEC_CREA`, `CONTRA_FEC_MODF`) VALUES
(1, 1, 1, 'root@localhost', 'root@localhost', '2023-03-09 19:07:36', '2023-03-09 19:07:36', 'root@localhost', 'root@localhost', '2023-03-09 19:07:36', '2023-03-09 19:07:36'),
(2, 2, 2, 'root@localhost', 'root@localhost', '2023-03-09 19:07:53', '2023-03-09 19:07:53', 'root@localhost', 'root@localhost', '2023-03-09 19:07:53', '2023-03-09 19:07:53'),
(3, 3, 3, 'root@localhost', 'root@localhost', '2023-03-09 19:08:29', '2023-03-09 19:08:29', 'root@localhost', 'root@localhost', '2023-03-09 19:08:29', '2023-03-09 19:08:29'),
(4, 4, 4, 'root@localhost', 'root@localhost', '2023-03-09 19:08:29', '2023-03-09 19:08:29', 'root@localhost', 'root@localhost', '2023-03-09 19:08:29', '2023-03-09 19:08:29'),
(6, 6, 6, 'root@localhost', 'root@localhost', '2023-04-09 23:17:15', '2023-04-09 23:25:25', 'root@localhost', 'root@localhost', '2023-04-09 23:17:15', '2023-04-09 23:17:15');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_hist_contrasegna`
--

CREATE TABLE `tbl_ms_hist_contrasegna` (
  `COD_HIST_CONTRA` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS HISTORIAL CONTRASEÑA',
  `COD_USR` bigint(20) DEFAULT NULL COMMENT 'CODIGO USUARIO',
  `CONTRASEGNA` varchar(32) NOT NULL DEFAULT '' COMMENT 'CONTRASEÑA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS CONTRASEÑA';

--
-- Volcado de datos para la tabla `tbl_ms_hist_contrasegna`
--

INSERT INTO `tbl_ms_hist_contrasegna` (`COD_HIST_CONTRA`, `COD_USR`, `CONTRASEGNA`) VALUES
(1, 1, ' d19d85ac57feb9da7749210f79ba301'),
(2, 2, '137772b7ecb263dc707ab445c56c0181'),
(3, 3, '137772b7ecb263dc707ab445c56c0181'),
(4, 4, '3e20d73773eab6c39d50b2c074c61a3b'),
(6, 6, '3e20d73773eab6c39d50b2c074c61a3b');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_parametros`
--

CREATE TABLE `tbl_ms_parametros` (
  `COD_PARAMETRO` bigint(20) NOT NULL COMMENT 'CODIGO DE LA LLAVE PRIMARIA',
  `PARAMETRO` varchar(50) NOT NULL COMMENT 'NOMBRE DEL PARAMETRO',
  `VALOR` varchar(100) NOT NULL COMMENT 'VALRO DEL PARAMETRO',
  `COD_USR` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA TABLA DE USUARIO',
  `CREADO_POR` varchar(50) NOT NULL COMMENT 'USUARIO QUE CREO EL PARAMETRO',
  `FEC_CREACION` date NOT NULL COMMENT 'FECHA EN LA QUE SE CREO EL PARAMETRO',
  `MODIFICADO_POR` varchar(50) NOT NULL COMMENT 'USUARIO QUE MODIFICO EL PARAMETRO',
  `FEC_MODIFICACION` date NOT NULL COMMENT ' FECHA EN LA QUE SE MODIFICO EL PARAMETRO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_ms_parametros`
--

INSERT INTO `tbl_ms_parametros` (`COD_PARAMETRO`, `PARAMETRO`, `VALOR`, `COD_USR`, `CREADO_POR`, `FEC_CREACION`, `MODIFICADO_POR`, `FEC_MODIFICACION`) VALUES
(1, 'ADMIN_INTENTOS_INVALIDOS', '3', 1, '', '2023-03-09', '', '2023-03-09'),
(2, 'ADMIN_CANT_PREG', '2', 1, '', '2023-03-09', '', '2023-03-09'),
(3, 'ADMIN_PREGUNTAS', '2', 1, '', '2023-03-09', '', '2023-03-09'),
(4, 'IMP_UTILIDAD', '0.15', 1, '', '2023-03-09', '', '2023-03-09'),
(5, 'NOM_EMPRESA', 'HTOURS', 1, '', '2023-03-09', '', '2023-03-09'),
(6, 'ADMIN_NUM_REGISTROS', '4', 1, '', '2023-03-09', '', '2023-03-09'),
(7, 'ADMIN_VIG_RECUPERACION', '30m', 1, '', '2023-03-09', '', '2023-03-09'),
(8, 'ADMIN_CORREO', 'systemhtours@gmail.com', 1, '', '2023-03-09', '', '2023-03-09'),
(9, 'ADMIN_APP_PASSWORD', 'kmbyyqvcgkxfpluj', 1, '', '2023-03-09', '', '2023-03-09');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_preg`
--

CREATE TABLE `tbl_ms_preg` (
  `COD_PREG` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS PREGUNTA',
  `PREGUNTA` varchar(100) NOT NULL DEFAULT '' COMMENT 'PREGUNTA',
  `COD_USR` bigint(20) NOT NULL COMMENT 'COD_USR'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS PREGUNTA';

--
-- Volcado de datos para la tabla `tbl_ms_preg`
--

INSERT INTO `tbl_ms_preg` (`COD_PREG`, `PREGUNTA`, `COD_USR`) VALUES
(1, 'Cual es tu color favorito?', 1),
(2, 'Cual es el mantenimiento Favorito?', 2),
(3, 'Cual es el registro Favorito?', 3),
(4, 'Cual es el registro Favorito?', 4);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_preg_usr`
--

CREATE TABLE `tbl_ms_preg_usr` (
  `COD_PREG` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS PREGUNTA USUARIO',
  `COD_USR` bigint(20) DEFAULT NULL COMMENT 'CODIGO USUARIO',
  `RESPUESTA` varchar(100) NOT NULL DEFAULT '' COMMENT 'RESPUESTA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS PREGUNTA USUARIO';

--
-- Volcado de datos para la tabla `tbl_ms_preg_usr`
--

INSERT INTO `tbl_ms_preg_usr` (`COD_PREG`, `COD_USR`, `RESPUESTA`) VALUES
(1, 1, 'verde'),
(2, 2, 'programacion'),
(3, 3, 'registro'),
(4, 4, 'registro');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_roles`
--

CREATE TABLE `tbl_ms_roles` (
  `COD_ROL` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS ROLES',
  `ROL` varchar(30) NOT NULL DEFAULT '' COMMENT 'ROL USUARIO',
  `DES_ROL` varchar(50) NOT NULL DEFAULT '' COMMENT 'DESCRIPCION ROL'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS ROLES';

--
-- Volcado de datos para la tabla `tbl_ms_roles`
--

INSERT INTO `tbl_ms_roles` (`COD_ROL`, `ROL`, `DES_ROL`) VALUES
(1, 'Administrador', 'Control Absoluto del sistema'),
(2, 'DEFAULT', 'Rol por defecto con el que se crea un usuario'),
(3, 'MANTENIMIENTO', 'USUARIO CODIFICADOR'),
(5, 'CONTADOR', 'Usuario contador del sistema'),
(8, 'Auditor', 'USUARIO Auditor');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_ms_usr`
--

CREATE TABLE `tbl_ms_usr` (
  `COD_USR` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA MS USUARIO',
  `USR` varchar(50) NOT NULL DEFAULT 'USUARIO' COMMENT 'USUARIO',
  `NOM_USR` varchar(100) NOT NULL DEFAULT '' COMMENT 'NOMBRE USUARIO',
  `EST_USR` enum('BLOQUEADO','ACTIVO','INACTIVO','NUEVO') NOT NULL DEFAULT 'NUEVO' COMMENT 'ESTADO USUARIO',
  `COD_ROL` bigint(20) DEFAULT NULL COMMENT 'CODIGO ROL',
  `FEC_ULT_CONN` datetime NOT NULL COMMENT 'FECHA ULTIMA CONEXION',
  `PREG_RES` bigint(20) NOT NULL DEFAULT 0 COMMENT 'PREGUNTA RESPONDIDA',
  `PRIMER_ACC` bigint(20) NOT NULL DEFAULT 0 COMMENT 'PRIMER ACCESO',
  `CORREO` varchar(100) NOT NULL DEFAULT '' COMMENT 'CORREO ELECTRONICO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA MS USUARIO';

--
-- Volcado de datos para la tabla `tbl_ms_usr`
--

INSERT INTO `tbl_ms_usr` (`COD_USR`, `USR`, `NOM_USR`, `EST_USR`, `COD_ROL`, `FEC_ULT_CONN`, `PREG_RES`, `PRIMER_ACC`, `CORREO`) VALUES
(1, 'ROOT', 'TecnoBot ', 'ACTIVO', 1, '2022-02-02 00:00:00', 1, 1, 'tecnobot@gmail.com'),
(2, 'MANT', 'TecnoBot Mantenimiento', 'NUEVO', 3, '2022-02-02 00:00:00', 1, 1, 'tecnobot@gmail.com'),
(3, 'Usuario_Auto_Registrado', 'Usuario Autoregisro Externo', 'NUEVO', 3, '2022-02-02 00:00:00', 1, 1, 'tecnobot@gmail.com'),
(4, 'TECNOBOT', 'Pruebas', 'ACTIVO', 1, '2023-04-09 23:25:31', 1, 8, 'tecnobot@gmail.com'),
(6, 'EMERSON001', 'Emerson Exequiel Ramos Velasquez', 'ACTIVO', 2, '2023-04-09 00:00:00', 0, 1, 'eeramosv@unah.hn');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_objetos`
--

CREATE TABLE `tbl_objetos` (
  `COD_OBJETO` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA',
  `OBJETO` varchar(100) NOT NULL COMMENT 'OBJETO DEL SISTEMA',
  `DES_OBJETO` varchar(100) NOT NULL COMMENT 'DESCRIPCION DEL OBJETO',
  `TIP_OBJETO` varchar(15) NOT NULL COMMENT 'TIPO DEL OBJETO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_objetos`
--

INSERT INTO `tbl_objetos` (`COD_OBJETO`, `OBJETO`, `DES_OBJETO`, `TIP_OBJETO`) VALUES
(1, 'HOME', 'PANTALLA PRINCIPAL', 'PANTALLA'),
(2, 'LOGIN', 'PANTALLA DE INICIO DE SESION', 'PANTALLA'),
(3, 'REGISTRO', 'PANTALLA DE REGISTRO DE USUARIO EXTERNA', 'PANTALLA'),
(4, 'CUENTAS', 'PANTALLA DE REGISTRO DE CUENTAS', 'PANTALLA'),
(5, 'SUBCUENTAS', 'PANTALLA DE REGISTRO DE SUBCUENTAS', 'PANTALLA'),
(6, 'LIBRODIARIO', 'PANTALLA DE LOS LIBROS DIARIOS', 'PANTALLA'),
(7, 'PERIODO', 'PANTALLA DE GESTION DE PERIODO', 'PANTALLA'),
(8, 'LIBROMAYOR', 'PANTALLA DE LOS LIBROS MAYORES', 'PANTALLA'),
(9, 'BALANCE', 'PANTALLA DE LOS LIBROS MAYORES', 'PANTALLA'),
(10, 'RESULTADOS', 'PANTALLA DE LOS LIBROS MAYORES', 'PANTALLA'),
(11, 'CLASIFICACION', 'PANTALLA DE LAS CLASIFICACIONES', 'PANTALLA'),
(12, 'GRUPOS', 'PANTALLA DE REGISTRO DE GRUPOS', 'PANTALLA'),
(13, 'PERSONAS', 'PANTALLA DE REGISTRO DE PERSONAS', 'PANTALLA'),
(14, 'OBJETOS', 'PANTALLA DE LOS OBJETOS', 'PANTALLA'),
(15, 'USUARIOS', 'PANTALLA DE USUARIOS', 'PANTALLA'),
(16, 'ROLES', 'PANTALLA DE ROLES', 'PANTALLA'),
(17, 'PERMISOS', 'PANTALLA DE PERMISOS', 'PANTALLA'),
(18, 'BITACORAS', 'PANTALLA DE BITACORAS', 'PANTALLA'),
(19, 'PARAMETROS', 'PANTALLA DE PARAMETROS', 'PANTALLA'),
(20, 'PREGUNTAS', 'PANTALLA DE PREGUNTAS', 'PANTALLA'),
(21, 'AJUSTES', 'PANTALLA DE AJUSTES', 'PANTALLA');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_periodos`
--

CREATE TABLE `tbl_periodos` (
  `COD_PERIODO` bigint(20) NOT NULL,
  `COD_USUARIO` bigint(20) NOT NULL COMMENT 'FORANEA PARA INDENTIFICAR QUE USUARIO EJECUTO EL CIERRE DE MES',
  `FEC_PERIODO` datetime NOT NULL COMMENT 'FECHA EN QUE SE REALIZO',
  `NOM_PERIODO` varchar(100) NOT NULL COMMENT 'Nombre del periodo',
  `FEC_INI` datetime NOT NULL COMMENT 'FECHA DE  CONTABLIZACION INICIAL DEL PERIODO',
  `FEC_FIN` datetime NOT NULL COMMENT 'FECHA DE FINALIZACION DEL PERIODO',
  `ESTADO` enum('ACTIVO','CERRADO') DEFAULT NULL COMMENT 'ESTADO DEL PERIODO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_periodos`
--

INSERT INTO `tbl_periodos` (`COD_PERIODO`, `COD_USUARIO`, `FEC_PERIODO`, `NOM_PERIODO`, `FEC_INI`, `FEC_FIN`, `ESTADO`) VALUES
(1, 4, '2023-04-09 22:22:14', 'Periodo-2023-Apr-001', '2019-10-10 00:00:00', '2019-10-11 00:00:00', 'ACTIVO');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_permisos`
--

CREATE TABLE `tbl_permisos` (
  `COD_PERMISO` bigint(20) NOT NULL COMMENT 'CODIGO DE LA LLAVE PRIMARIA',
  `COD_ROL` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA TABLA ROL',
  `COD_OBJETO` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA DE LA TABLA DE OBJETO',
  `PER_INSERCION` varchar(1) NOT NULL COMMENT 'PERMISO INSERTACION',
  `PER_ELIMINACION` varchar(1) NOT NULL COMMENT 'PERMISO DE ELIMAR',
  `PER_ACTUALIZACION` varchar(1) NOT NULL COMMENT 'PERMISO PARA ACTUALIZAR',
  `PER_CONSULTAR` varchar(1) NOT NULL COMMENT 'PERMISO PARA CONSULTAR'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_permisos`
--

INSERT INTO `tbl_permisos` (`COD_PERMISO`, `COD_ROL`, `COD_OBJETO`, `PER_INSERCION`, `PER_ELIMINACION`, `PER_ACTUALIZACION`, `PER_CONSULTAR`) VALUES
(1, 1, 1, '1', '1', '1', '1'),
(2, 1, 2, '1', '1', '1', '1'),
(3, 1, 3, '1', '1', '1', '1'),
(4, 1, 4, '1', '1', '1', '1'),
(5, 1, 5, '1', '1', '1', '1'),
(6, 1, 6, '1', '1', '1', '1'),
(7, 1, 7, '1', '1', '1', '1'),
(8, 1, 8, '1', '1', '1', '1'),
(9, 1, 9, '1', '1', '1', '1'),
(10, 1, 10, '1', '1', '1', '1'),
(11, 1, 11, '1', '1', '1', '1'),
(12, 1, 12, '1', '1', '1', '1'),
(13, 1, 13, '1', '1', '1', '1'),
(14, 1, 14, '1', '1', '1', '1'),
(15, 1, 15, '1', '1', '1', '1'),
(16, 1, 16, '1', '1', '1', '1'),
(17, 1, 17, '1', '1', '1', '1'),
(18, 1, 18, '1', '1', '1', '1'),
(19, 1, 19, '1', '1', '1', '1'),
(20, 1, 20, '1', '1', '1', '1');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_personas`
--

CREATE TABLE `tbl_personas` (
  `COD_PERSONA` bigint(20) NOT NULL COMMENT 'CODIGO DE LA PERSONA',
  `COD_USER` bigint(20) DEFAULT NULL COMMENT 'LLAVE PRIMARIA DE USUARIO',
  `SEX_PERSONA` enum('F','M') NOT NULL COMMENT 'SEXO DE LA PERSONA',
  `IND_CIVIL` enum('S','C','D','V') NOT NULL COMMENT 'ESTADO CIVIL DE LA PERSONA',
  `EDA_PERSONAL` tinyint(4) NOT NULL COMMENT 'EDAD DE LA PERSONA',
  `TIP_PERSONA` enum('N','J') NOT NULL COMMENT 'TIPO DE PERSONA',
  `NUM_IDENTIDAD` varchar(15) NOT NULL COMMENT 'Numero de Identidad',
  `FEC_REGISTRO` datetime NOT NULL COMMENT 'FECHA EN LA QUE SE REGISTRA',
  `EST_USR` enum('BLOQUEADO','ACTIVO','INACTIVO') NOT NULL DEFAULT 'ACTIVO' COMMENT 'ESTADO PERSONA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA DE REPORTES';

--
-- Volcado de datos para la tabla `tbl_personas`
--

INSERT INTO `tbl_personas` (`COD_PERSONA`, `COD_USER`, `SEX_PERSONA`, `IND_CIVIL`, `EDA_PERSONAL`, `TIP_PERSONA`, `NUM_IDENTIDAD`, `FEC_REGISTRO`, `EST_USR`) VALUES
(1, 4, 'M', 'S', 26, 'J', '0801-2000-08100', '2023-03-09 19:08:29', 'ACTIVO'),
(2, 1, 'F', 'S', 2, 'J', '0801-2000-08100', '2023-03-09 19:08:29', 'ACTIVO');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_roles_objetos`
--

CREATE TABLE `tbl_roles_objetos` (
  `COD_ROL` bigint(20) NOT NULL COMMENT 'CODIGO DE LLAVE PRIMARIA ROL',
  `COD_OBJETO` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA CON OBJETO',
  `PER_EDICION` varchar(100) NOT NULL COMMENT 'PERMISO DE EDICION',
  `PER_ELIMINAR` varchar(100) NOT NULL COMMENT 'PERMISO ELIMINAR',
  `PER_ACTUALIZAR` varchar(100) NOT NULL COMMENT 'PERMISO DE ACTUALIZAR',
  `FEC_CREACION` date NOT NULL COMMENT 'FECHA DE CREACION',
  `CREADO_POR` varchar(100) NOT NULL COMMENT 'QUIE CREO EL ROL',
  `FEC_MODIFICACION` date NOT NULL COMMENT 'FECHA DE MODIFICACION',
  `MOD_POR` varchar(100) NOT NULL COMMENT 'MODIFICADO POR'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_subcuentas`
--

CREATE TABLE `tbl_subcuentas` (
  `COD_SUBCUENTA` bigint(20) NOT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA',
  `COD_CLASIFICACION` bigint(20) DEFAULT NULL COMMENT 'LLAVE FORANEA DE LA TABLA CLASIFICACION',
  `NUM_SUBCUENTA` varchar(255) NOT NULL COMMENT 'NUMERO DE LA CUENTA',
  `NOM_SUBCUENTA` varchar(255) NOT NULL COMMENT 'NOMBRE DE LA CUENTA',
  `COD_CUENTA` bigint(20) DEFAULT NULL COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_telefonos`
--

CREATE TABLE `tbl_telefonos` (
  `COD_TELEFONO` bigint(20) NOT NULL COMMENT 'LLAVE PRIMARIA TELEFONOS',
  `COD_PERSONA` bigint(20) DEFAULT NULL COMMENT 'CODIGO PERSONA',
  `NUM_TELEFONO` varchar(32) NOT NULL COMMENT 'NUMERO TELEFENO',
  `TIP_TELEFONO` enum('P','C','T') DEFAULT NULL COMMENT 'TIPO DE TELEFONO'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Volcado de datos para la tabla `tbl_telefonos`
--

INSERT INTO `tbl_telefonos` (`COD_TELEFONO`, `COD_PERSONA`, `NUM_TELEFONO`, `TIP_TELEFONO`) VALUES
(1, 1, '+504 33410754', 'C'),
(2, 2, '+504 33410754', 'C');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `tbl_transacciones`
--

CREATE TABLE `tbl_transacciones` (
  `COD_TRANSACCION` bigint(20) NOT NULL COMMENT 'CODIGO DE LA LLAVE PRIMARIA ',
  `COD_SUBCUENTA` bigint(20) NOT NULL COMMENT 'LLAVE FORANEA CON TABLAS DE SUBCUENTAS'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='TABLA DE TRANSFERENCIAS DE SUBCUENTAS LIBRO DIARIO';

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla `tbl_clasificaciones`
--
ALTER TABLE `tbl_clasificaciones`
  ADD PRIMARY KEY (`COD_CLASIFICACION`);

--
-- Indices de la tabla `tbl_comprobantes`
--
ALTER TABLE `tbl_comprobantes`
  ADD PRIMARY KEY (`COD_COMPROBANTE`),
  ADD KEY `FK_COM_LIBDIARIO` (`COD_LIBDIARIO`);

--
-- Indices de la tabla `tbl_cuentas`
--
ALTER TABLE `tbl_cuentas`
  ADD PRIMARY KEY (`COD_CUENTA`),
  ADD KEY `FK_CUECLA` (`COD_CLASIFICACION`),
  ADD KEY `FK_CUEGRUP` (`COD_GRUPO`);

--
-- Indices de la tabla `tbl_errores`
--
ALTER TABLE `tbl_errores`
  ADD PRIMARY KEY (`COD_ERROR`),
  ADD KEY `FK_ERRBIT` (`COD_BITACORA`);

--
-- Indices de la tabla `tbl_estados_cuentas`
--
ALTER TABLE `tbl_estados_cuentas`
  ADD PRIMARY KEY (`COD_ESTCUENTA`),
  ADD KEY `FK_ESTCUE` (`COD_CUENTA`);

--
-- Indices de la tabla `tbl_estados_subcuentas`
--
ALTER TABLE `tbl_estados_subcuentas`
  ADD PRIMARY KEY (`COD_ESTADO`),
  ADD KEY `FK_ESTSUB` (`COD_SUBCUENTA`);

--
-- Indices de la tabla `tbl_grupos`
--
ALTER TABLE `tbl_grupos`
  ADD PRIMARY KEY (`COD_GRUPO`),
  ADD KEY `FK_GRUPCLA` (`COD_CLASIFICACION`);

--
-- Indices de la tabla `tbl_libros_diarios`
--
ALTER TABLE `tbl_libros_diarios`
  ADD PRIMARY KEY (`COD_LIBDIARIO`),
  ADD KEY `FK_LIBPER` (`COD_PERIODO`);

--
-- Indices de la tabla `tbl_libros_mayores`
--
ALTER TABLE `tbl_libros_mayores`
  ADD PRIMARY KEY (`COD_LIBMAYOR`),
  ADD KEY `FK_LIBMCUE` (`COD_CUENTA`),
  ADD KEY `FK_LIBMCLA` (`COD_CLASIFICACION`),
  ADD KEY `FK_LIBMPER` (`COD_PERIODO`),
  ADD KEY `FK_LIBEST` (`COD_ESTCUENTA`),
  ADD KEY `FK_LIBGRUP` (`COD_GRUPO`);

--
-- Indices de la tabla `tbl_ms_bitacoras`
--
ALTER TABLE `tbl_ms_bitacoras`
  ADD PRIMARY KEY (`COD_BITACORA`),
  ADD KEY `FK_CODRB` (`COD_USR`),
  ADD KEY `FK_BITOBJ` (`COD_OBJETO`);

--
-- Indices de la tabla `tbl_ms_bitacora_usr`
--
ALTER TABLE `tbl_ms_bitacora_usr`
  ADD PRIMARY KEY (`COD_BITACORA_USR`),
  ADD KEY `FK_BITACORA_USR` (`COD_USR`),
  ADD KEY `FK_BITACORA_CONTRA` (`COD_CONTRA`);

--
-- Indices de la tabla `tbl_ms_hist_contrasegna`
--
ALTER TABLE `tbl_ms_hist_contrasegna`
  ADD PRIMARY KEY (`COD_HIST_CONTRA`),
  ADD KEY `FK_USR` (`COD_USR`);

--
-- Indices de la tabla `tbl_ms_parametros`
--
ALTER TABLE `tbl_ms_parametros`
  ADD PRIMARY KEY (`COD_PARAMETRO`),
  ADD KEY `FK_PARUSR` (`COD_USR`);

--
-- Indices de la tabla `tbl_ms_preg`
--
ALTER TABLE `tbl_ms_preg`
  ADD PRIMARY KEY (`COD_PREG`),
  ADD KEY `tbl_ms_preg_FK` (`COD_USR`);

--
-- Indices de la tabla `tbl_ms_preg_usr`
--
ALTER TABLE `tbl_ms_preg_usr`
  ADD PRIMARY KEY (`COD_PREG`),
  ADD KEY `FK_COD_USR` (`COD_USR`);

--
-- Indices de la tabla `tbl_ms_roles`
--
ALTER TABLE `tbl_ms_roles`
  ADD PRIMARY KEY (`COD_ROL`);

--
-- Indices de la tabla `tbl_ms_usr`
--
ALTER TABLE `tbl_ms_usr`
  ADD PRIMARY KEY (`COD_USR`),
  ADD KEY `FK_COD_ROL` (`COD_ROL`);

--
-- Indices de la tabla `tbl_objetos`
--
ALTER TABLE `tbl_objetos`
  ADD PRIMARY KEY (`COD_OBJETO`);

--
-- Indices de la tabla `tbl_periodos`
--
ALTER TABLE `tbl_periodos`
  ADD PRIMARY KEY (`COD_PERIODO`),
  ADD KEY `FK_PERUSU` (`COD_USUARIO`);

--
-- Indices de la tabla `tbl_permisos`
--
ALTER TABLE `tbl_permisos`
  ADD PRIMARY KEY (`COD_PERMISO`),
  ADD KEY `FK_PERROLES` (`COD_ROL`),
  ADD KEY `FK_PEROBJ` (`COD_OBJETO`);

--
-- Indices de la tabla `tbl_personas`
--
ALTER TABLE `tbl_personas`
  ADD PRIMARY KEY (`COD_PERSONA`),
  ADD KEY `FK_PERUSR` (`COD_USER`);

--
-- Indices de la tabla `tbl_roles_objetos`
--
ALTER TABLE `tbl_roles_objetos`
  ADD PRIMARY KEY (`COD_ROL`),
  ADD KEY `FK_ROLOBJ` (`COD_ROL`),
  ADD KEY `FK_OBJEROL` (`COD_OBJETO`);

--
-- Indices de la tabla `tbl_subcuentas`
--
ALTER TABLE `tbl_subcuentas`
  ADD PRIMARY KEY (`COD_SUBCUENTA`),
  ADD KEY `FK_SUBCLA` (`COD_CLASIFICACION`),
  ADD KEY `FK_SUBCUE` (`COD_CUENTA`);

--
-- Indices de la tabla `tbl_telefonos`
--
ALTER TABLE `tbl_telefonos`
  ADD PRIMARY KEY (`COD_TELEFONO`),
  ADD KEY `FK_TELPER` (`COD_PERSONA`);

--
-- Indices de la tabla `tbl_transacciones`
--
ALTER TABLE `tbl_transacciones`
  ADD PRIMARY KEY (`COD_TRANSACCION`),
  ADD KEY `FK_TRANSUB` (`COD_SUBCUENTA`);

--
-- AUTO_INCREMENT de las tablas volcadas
--

--
-- AUTO_INCREMENT de la tabla `tbl_clasificaciones`
--
ALTER TABLE `tbl_clasificaciones`
  MODIFY `COD_CLASIFICACION` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA', AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT de la tabla `tbl_comprobantes`
--
ALTER TABLE `tbl_comprobantes`
  MODIFY `COD_COMPROBANTE` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_cuentas`
--
ALTER TABLE `tbl_cuentas`
  MODIFY `COD_CUENTA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_errores`
--
ALTER TABLE `tbl_errores`
  MODIFY `COD_ERROR` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_estados_cuentas`
--
ALTER TABLE `tbl_estados_cuentas`
  MODIFY `COD_ESTCUENTA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA DE LA TABLA ESTADO';

--
-- AUTO_INCREMENT de la tabla `tbl_estados_subcuentas`
--
ALTER TABLE `tbl_estados_subcuentas`
  MODIFY `COD_ESTADO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA DE LA TABLA ESTADO';

--
-- AUTO_INCREMENT de la tabla `tbl_grupos`
--
ALTER TABLE `tbl_grupos`
  MODIFY `COD_GRUPO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA', AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT de la tabla `tbl_libros_diarios`
--
ALTER TABLE `tbl_libros_diarios`
  MODIFY `COD_LIBDIARIO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_libros_mayores`
--
ALTER TABLE `tbl_libros_mayores`
  MODIFY `COD_LIBMAYOR` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_ms_bitacoras`
--
ALTER TABLE `tbl_ms_bitacoras`
  MODIFY `COD_BITACORA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA', AUTO_INCREMENT=90;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_bitacora_usr`
--
ALTER TABLE `tbl_ms_bitacora_usr`
  MODIFY `COD_BITACORA_USR` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS BITACORA USR', AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_hist_contrasegna`
--
ALTER TABLE `tbl_ms_hist_contrasegna`
  MODIFY `COD_HIST_CONTRA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS HISTORIAL CONTRASEÑA', AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_parametros`
--
ALTER TABLE `tbl_ms_parametros`
  MODIFY `COD_PARAMETRO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO DE LA LLAVE PRIMARIA', AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_preg`
--
ALTER TABLE `tbl_ms_preg`
  MODIFY `COD_PREG` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS PREGUNTA', AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_preg_usr`
--
ALTER TABLE `tbl_ms_preg_usr`
  MODIFY `COD_PREG` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS PREGUNTA USUARIO', AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_roles`
--
ALTER TABLE `tbl_ms_roles`
  MODIFY `COD_ROL` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS ROLES', AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT de la tabla `tbl_ms_usr`
--
ALTER TABLE `tbl_ms_usr`
  MODIFY `COD_USR` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA MS USUARIO', AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT de la tabla `tbl_objetos`
--
ALTER TABLE `tbl_objetos`
  MODIFY `COD_OBJETO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA', AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT de la tabla `tbl_periodos`
--
ALTER TABLE `tbl_periodos`
  MODIFY `COD_PERIODO` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT de la tabla `tbl_permisos`
--
ALTER TABLE `tbl_permisos`
  MODIFY `COD_PERMISO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO DE LA LLAVE PRIMARIA', AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT de la tabla `tbl_personas`
--
ALTER TABLE `tbl_personas`
  MODIFY `COD_PERSONA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO DE LA PERSONA', AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT de la tabla `tbl_roles_objetos`
--
ALTER TABLE `tbl_roles_objetos`
  MODIFY `COD_ROL` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO DE LLAVE PRIMARIA ROL';

--
-- AUTO_INCREMENT de la tabla `tbl_subcuentas`
--
ALTER TABLE `tbl_subcuentas`
  MODIFY `COD_SUBCUENTA` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO ID DE LA LLAVE PRIMARIA';

--
-- AUTO_INCREMENT de la tabla `tbl_telefonos`
--
ALTER TABLE `tbl_telefonos`
  MODIFY `COD_TELEFONO` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'LLAVE PRIMARIA TELEFONOS', AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT de la tabla `tbl_transacciones`
--
ALTER TABLE `tbl_transacciones`
  MODIFY `COD_TRANSACCION` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'CODIGO DE LA LLAVE PRIMARIA ';

--
-- Restricciones para tablas volcadas
--

--
-- Filtros para la tabla `tbl_comprobantes`
--
ALTER TABLE `tbl_comprobantes`
  ADD CONSTRAINT `FK_COM_LIBDIARIO` FOREIGN KEY (`COD_LIBDIARIO`) REFERENCES `tbl_libros_diarios` (`COD_LIBDIARIO`);

--
-- Filtros para la tabla `tbl_cuentas`
--
ALTER TABLE `tbl_cuentas`
  ADD CONSTRAINT `FK_CUECLA` FOREIGN KEY (`COD_CLASIFICACION`) REFERENCES `tbl_clasificaciones` (`COD_CLASIFICACION`),
  ADD CONSTRAINT `FK_CUEGRUP` FOREIGN KEY (`COD_GRUPO`) REFERENCES `tbl_grupos` (`COD_GRUPO`);

--
-- Filtros para la tabla `tbl_errores`
--
ALTER TABLE `tbl_errores`
  ADD CONSTRAINT `FK_ERRBIT` FOREIGN KEY (`COD_BITACORA`) REFERENCES `tbl_ms_bitacoras` (`COD_BITACORA`);

--
-- Filtros para la tabla `tbl_estados_cuentas`
--
ALTER TABLE `tbl_estados_cuentas`
  ADD CONSTRAINT `FK_ESTCUE` FOREIGN KEY (`COD_CUENTA`) REFERENCES `tbl_cuentas` (`COD_CUENTA`) ON DELETE CASCADE;

--
-- Filtros para la tabla `tbl_estados_subcuentas`
--
ALTER TABLE `tbl_estados_subcuentas`
  ADD CONSTRAINT `FK_ESTSUB` FOREIGN KEY (`COD_SUBCUENTA`) REFERENCES `tbl_subcuentas` (`COD_SUBCUENTA`) ON DELETE CASCADE;

--
-- Filtros para la tabla `tbl_grupos`
--
ALTER TABLE `tbl_grupos`
  ADD CONSTRAINT `FK_GRUPCLA` FOREIGN KEY (`COD_CLASIFICACION`) REFERENCES `tbl_clasificaciones` (`COD_CLASIFICACION`);

--
-- Filtros para la tabla `tbl_libros_diarios`
--
ALTER TABLE `tbl_libros_diarios`
  ADD CONSTRAINT `FK_LIBPER` FOREIGN KEY (`COD_PERIODO`) REFERENCES `tbl_periodos` (`COD_PERIODO`);

--
-- Filtros para la tabla `tbl_libros_mayores`
--
ALTER TABLE `tbl_libros_mayores`
  ADD CONSTRAINT `FK_LIBEST` FOREIGN KEY (`COD_ESTCUENTA`) REFERENCES `tbl_estados_cuentas` (`COD_ESTCUENTA`),
  ADD CONSTRAINT `FK_LIBGRUP` FOREIGN KEY (`COD_GRUPO`) REFERENCES `tbl_grupos` (`COD_GRUPO`),
  ADD CONSTRAINT `FK_LIBMCLA` FOREIGN KEY (`COD_CLASIFICACION`) REFERENCES `tbl_clasificaciones` (`COD_CLASIFICACION`),
  ADD CONSTRAINT `FK_LIBMCUE` FOREIGN KEY (`COD_CUENTA`) REFERENCES `tbl_cuentas` (`COD_CUENTA`),
  ADD CONSTRAINT `FK_LIBMPER` FOREIGN KEY (`COD_PERIODO`) REFERENCES `tbl_periodos` (`COD_PERIODO`);

--
-- Filtros para la tabla `tbl_ms_bitacoras`
--
ALTER TABLE `tbl_ms_bitacoras`
  ADD CONSTRAINT `FK_BITOBJ` FOREIGN KEY (`COD_OBJETO`) REFERENCES `tbl_objetos` (`COD_OBJETO`),
  ADD CONSTRAINT `FK_CODRB` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_ms_bitacora_usr`
--
ALTER TABLE `tbl_ms_bitacora_usr`
  ADD CONSTRAINT `FK_BITACORA_CONTRA` FOREIGN KEY (`COD_CONTRA`) REFERENCES `tbl_ms_hist_contrasegna` (`COD_HIST_CONTRA`),
  ADD CONSTRAINT `FK_BITACORA_USR` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_ms_hist_contrasegna`
--
ALTER TABLE `tbl_ms_hist_contrasegna`
  ADD CONSTRAINT `FK_USR` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`) ON DELETE CASCADE;

--
-- Filtros para la tabla `tbl_ms_parametros`
--
ALTER TABLE `tbl_ms_parametros`
  ADD CONSTRAINT `FK_PARAMUSR` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`),
  ADD CONSTRAINT `FK_PARUSR` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_ms_preg`
--
ALTER TABLE `tbl_ms_preg`
  ADD CONSTRAINT `tbl_ms_preg_FK` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_ms_preg_usr`
--
ALTER TABLE `tbl_ms_preg_usr`
  ADD CONSTRAINT `FK_COD_USR` FOREIGN KEY (`COD_USR`) REFERENCES `tbl_ms_usr` (`COD_USR`),
  ADD CONSTRAINT `FK_PREG_USR` FOREIGN KEY (`COD_PREG`) REFERENCES `tbl_ms_preg` (`COD_PREG`);

--
-- Filtros para la tabla `tbl_ms_usr`
--
ALTER TABLE `tbl_ms_usr`
  ADD CONSTRAINT `FK_COD_ROL` FOREIGN KEY (`COD_ROL`) REFERENCES `tbl_ms_roles` (`COD_ROL`);

--
-- Filtros para la tabla `tbl_periodos`
--
ALTER TABLE `tbl_periodos`
  ADD CONSTRAINT `FK_PERUSU` FOREIGN KEY (`COD_USUARIO`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_permisos`
--
ALTER TABLE `tbl_permisos`
  ADD CONSTRAINT `FK_PEROBJ` FOREIGN KEY (`COD_OBJETO`) REFERENCES `tbl_objetos` (`COD_OBJETO`),
  ADD CONSTRAINT `FK_PERROLES` FOREIGN KEY (`COD_ROL`) REFERENCES `tbl_ms_roles` (`COD_ROL`);

--
-- Filtros para la tabla `tbl_personas`
--
ALTER TABLE `tbl_personas`
  ADD CONSTRAINT `FK_PERUSR` FOREIGN KEY (`COD_USER`) REFERENCES `tbl_ms_usr` (`COD_USR`);

--
-- Filtros para la tabla `tbl_roles_objetos`
--
ALTER TABLE `tbl_roles_objetos`
  ADD CONSTRAINT `FK_OBJEROL` FOREIGN KEY (`COD_ROL`) REFERENCES `tbl_ms_roles` (`COD_ROL`),
  ADD CONSTRAINT `FK_ROLOBJ` FOREIGN KEY (`COD_OBJETO`) REFERENCES `tbl_objetos` (`COD_OBJETO`);

--
-- Filtros para la tabla `tbl_subcuentas`
--
ALTER TABLE `tbl_subcuentas`
  ADD CONSTRAINT `FK_SUBCLA` FOREIGN KEY (`COD_CLASIFICACION`) REFERENCES `tbl_clasificaciones` (`COD_CLASIFICACION`),
  ADD CONSTRAINT `FK_SUBCUE` FOREIGN KEY (`COD_CUENTA`) REFERENCES `tbl_cuentas` (`COD_CUENTA`);

--
-- Filtros para la tabla `tbl_telefonos`
--
ALTER TABLE `tbl_telefonos`
  ADD CONSTRAINT `FK_TELPER` FOREIGN KEY (`COD_PERSONA`) REFERENCES `tbl_personas` (`COD_PERSONA`);

--
-- Filtros para la tabla `tbl_transacciones`
--
ALTER TABLE `tbl_transacciones`
  ADD CONSTRAINT `FK_TRANSUB` FOREIGN KEY (`COD_SUBCUENTA`) REFERENCES `tbl_subcuentas` (`COD_SUBCUENTA`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
